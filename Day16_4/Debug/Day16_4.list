
Day16_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000478  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000478  08000478  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000478  08000478  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800047c  0800047c  0000147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000480  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ea8  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000356  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00003238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006c  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fb3  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f4e  00000000  00000000  0001b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b8db  00000000  00000000  0001c24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a7b28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000138  00000000  00000000  000a7b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000a7ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000049  00000000  00000000  000a7cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000460 	.word	0x08000460

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000460 	.word	0x08000460

080001c8 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	int duty;
	TimerPwmInit();
 800021e:	f000 f861 	bl	80002e4 <TimerPwmInit>
	while(1) {
		for(duty=0; duty<100; duty++) {
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	e008      	b.n	800023a <main+0x22>
			TIM8->CCR1 = duty;
 8000228:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <main+0x48>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	6353      	str	r3, [r2, #52]	@ 0x34
			DelayMs(40);
 800022e:	2028      	movs	r0, #40	@ 0x28
 8000230:	f7ff ffca 	bl	80001c8 <DelayMs>
		for(duty=0; duty<100; duty++) {
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b63      	cmp	r3, #99	@ 0x63
 800023e:	ddf3      	ble.n	8000228 <main+0x10>
		}
		for(duty=99; duty>=0; duty--) {
 8000240:	2363      	movs	r3, #99	@ 0x63
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	e008      	b.n	8000258 <main+0x40>
			TIM8->CCR1 = duty;
 8000246:	4a06      	ldr	r2, [pc, #24]	@ (8000260 <main+0x48>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	6353      	str	r3, [r2, #52]	@ 0x34
			DelayMs(40);
 800024c:	2028      	movs	r0, #40	@ 0x28
 800024e:	f7ff ffbb 	bl	80001c8 <DelayMs>
		for(duty=99; duty>=0; duty--) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3b01      	subs	r3, #1
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b00      	cmp	r3, #0
 800025c:	daf3      	bge.n	8000246 <main+0x2e>
		for(duty=0; duty<100; duty++) {
 800025e:	e7e0      	b.n	8000222 <main+0xa>
 8000260:	40010400 	.word	0x40010400

08000264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000268:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <SystemInit+0x1c>)
 800026a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800026e:	4a04      	ldr	r2, [pc, #16]	@ (8000280 <SystemInit+0x1c>)
 8000270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000278:	f000 f804 	bl	8000284 <DWT_Init>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000288:	4b14      	ldr	r3, [pc, #80]	@ (80002dc <DWT_Init+0x58>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a13      	ldr	r2, [pc, #76]	@ (80002dc <DWT_Init+0x58>)
 800028e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000292:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <DWT_Init+0x58>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	4a10      	ldr	r2, [pc, #64]	@ (80002dc <DWT_Init+0x58>)
 800029a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800029e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <DWT_Init+0x5c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0e      	ldr	r2, [pc, #56]	@ (80002e0 <DWT_Init+0x5c>)
 80002a6:	f023 0301 	bic.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <DWT_Init+0x5c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0b      	ldr	r2, [pc, #44]	@ (80002e0 <DWT_Init+0x5c>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80002b8:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <DWT_Init+0x5c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80002be:	bf00      	nop
    __ASM volatile ("NOP");
 80002c0:	bf00      	nop
    __ASM volatile ("NOP");
 80002c2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <DWT_Init+0x5c>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	bf0c      	ite	eq
 80002cc:	2301      	moveq	r3, #1
 80002ce:	2300      	movne	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000edf0 	.word	0xe000edf0
 80002e0:	e0001000 	.word	0xe0001000

080002e4 <TimerPwmInit>:
 */

#include "timer.h"

void TimerPwmInit(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	// config PC6 as TIM8 CH1
	// enable PC clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002e8:	4b33      	ldr	r3, [pc, #204]	@ (80003b8 <TimerPwmInit+0xd4>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ec:	4a32      	ldr	r2, [pc, #200]	@ (80003b8 <TimerPwmInit+0xd4>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6313      	str	r3, [r2, #48]	@ 0x30
	// set PC6 mode as Alt Fn (10)
	GPIOC->MODER |= BV(2 * 6 + 1);
 80002f4:	4b31      	ldr	r3, [pc, #196]	@ (80003bc <TimerPwmInit+0xd8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a30      	ldr	r2, [pc, #192]	@ (80003bc <TimerPwmInit+0xd8>)
 80002fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002fe:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~BV(2 * 6);
 8000300:	4b2e      	ldr	r3, [pc, #184]	@ (80003bc <TimerPwmInit+0xd8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a2d      	ldr	r2, [pc, #180]	@ (80003bc <TimerPwmInit+0xd8>)
 8000306:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800030a:	6013      	str	r3, [r2, #0]
	// disable pull-up and pull-down regrs
	GPIOC->PUPDR &= ~(BV(2 * 6) | BV(2 * 6 + 1));
 800030c:	4b2b      	ldr	r3, [pc, #172]	@ (80003bc <TimerPwmInit+0xd8>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a2a      	ldr	r2, [pc, #168]	@ (80003bc <TimerPwmInit+0xd8>)
 8000312:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000316:	60d3      	str	r3, [r2, #12]
	// set alt fn "3" as TIM8
	GPIOC->AFR[0] |= (3 << (6 * 4));
 8000318:	4b28      	ldr	r3, [pc, #160]	@ (80003bc <TimerPwmInit+0xd8>)
 800031a:	6a1b      	ldr	r3, [r3, #32]
 800031c:	4a27      	ldr	r2, [pc, #156]	@ (80003bc <TimerPwmInit+0xd8>)
 800031e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000322:	6213      	str	r3, [r2, #32]

	// PWM config
	// 0. Enable TIM8 clock
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000324:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <TimerPwmInit+0xd4>)
 8000326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000328:	4a23      	ldr	r2, [pc, #140]	@ (80003b8 <TimerPwmInit+0xd4>)
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6453      	str	r3, [r2, #68]	@ 0x44
	// 1. Setup PWM clock (10 KHz to 100 KHz). Program the period (ARR) and the duty cycle (CCR) respectively in ARR and CCRx registers.
	//    - PCLK = 16MHz, PSC = 16 --> TCLK = 1MHz
	//    - ARR = 100 => PWM output freq = TCLK / ARR = 1 MHz / 100 = 10 KHz
	//    - CCR = 50 => 50% Duty Cycle
	TIM8->PSC = TIM_PR - 1;
 8000330:	4b23      	ldr	r3, [pc, #140]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000332:	220f      	movs	r2, #15
 8000334:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM8->ARR = 100 - 1;
 8000336:	4b22      	ldr	r3, [pc, #136]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000338:	2263      	movs	r2, #99	@ 0x63
 800033a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM8->CCR1 = 0;
 800033c:	4b20      	ldr	r3, [pc, #128]	@ (80003c0 <TimerPwmInit+0xdc>)
 800033e:	2200      	movs	r2, #0
 8000340:	635a      	str	r2, [r3, #52]	@ 0x34
	// 2. Configure the output pin:
	//    - Select the output mode by writing CCS bits (00 = output) in CCMRx register.
	//    - Select the polarity by writing the CCxP bit (0 = active high) in CCER register.
	TIM8->CCMR1 &= ~(TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC1S_1);
 8000342:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a1e      	ldr	r2, [pc, #120]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000348:	f023 0303 	bic.w	r3, r3, #3
 800034c:	6193      	str	r3, [r2, #24]
	TIM8->CCER &= ~TIM_CCER_CC1P;
 800034e:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000350:	6a1b      	ldr	r3, [r3, #32]
 8000352:	4a1b      	ldr	r2, [pc, #108]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000354:	f023 0302 	bic.w	r3, r3, #2
 8000358:	6213      	str	r3, [r2, #32]
	// 3. Select the PWM mode (PWM1 or PWM2) by writing OCxM bits in CCMRx register.
	//    - The PWM mode can be selected independently on each channel (one PWM per OCx output) by writing 110 (PWM mode 1) or 111 (PWM mode 2) in the TIMx_CCMRx register.
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // PWM Mode1
 800035a:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <TimerPwmInit+0xdc>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a18      	ldr	r2, [pc, #96]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000360:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000364:	6193      	str	r3, [r2, #24]
	// 4. Set the preload bit in CCMRx register and the ARPE bit in the CR1 register.
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000366:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a15      	ldr	r2, [pc, #84]	@ (80003c0 <TimerPwmInit+0xdc>)
 800036c:	f043 0308 	orr.w	r3, r3, #8
 8000370:	6193      	str	r3, [r2, #24]
	TIM8->CR1 |= TIM_CR1_ARPE;
 8000372:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800037c:	6013      	str	r3, [r2, #0]
	// 5. Select the counting mode in CR1:
	//    - PWM edge-aligned mode (00): the counter must be configured up-counting or down-counting.
	//    - PWM center aligned mode: the counter mode must be center aligned counting mode (CMS bits different from '00').
	TIM8->CR1 |= BV(5);
 800037e:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a0f      	ldr	r2, [pc, #60]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000384:	f043 0320 	orr.w	r3, r3, #32
 8000388:	6013      	str	r3, [r2, #0]
	// 6. Enable the capture compare in CCER.
	TIM8->CCER |= TIM_CCER_CC1E;
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <TimerPwmInit+0xdc>)
 800038c:	6a1b      	ldr	r3, [r3, #32]
 800038e:	4a0c      	ldr	r2, [pc, #48]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6213      	str	r3, [r2, #32]
	// 7. Enable main output in BDTR and Enable the counter.
	TIM8->BDTR |= TIM_BDTR_MOE;
 8000396:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <TimerPwmInit+0xdc>)
 8000398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800039a:	4a09      	ldr	r2, [pc, #36]	@ (80003c0 <TimerPwmInit+0xdc>)
 800039c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003a0:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM8->CR1 |= TIM_CR1_CEN;
 80003a2:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <TimerPwmInit+0xdc>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a06      	ldr	r2, [pc, #24]	@ (80003c0 <TimerPwmInit+0xdc>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40023800 	.word	0x40023800
 80003bc:	40020800 	.word	0x40020800
 80003c0:	40010400 	.word	0x40010400

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	@ (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f7ff ff4c 	bl	8000264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	@ (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	@ (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	@ (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003f6:	f7ff ff0f 	bl	8000218 <main>

080003fa <LoopForever>:

LoopForever:
  b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000410:	20000020 	.word	0x20000020

08000414 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4d0d      	ldr	r5, [pc, #52]	@ (8000450 <__libc_init_array+0x38>)
 800041c:	4c0d      	ldr	r4, [pc, #52]	@ (8000454 <__libc_init_array+0x3c>)
 800041e:	1b64      	subs	r4, r4, r5
 8000420:	10a4      	asrs	r4, r4, #2
 8000422:	2600      	movs	r6, #0
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	4d0b      	ldr	r5, [pc, #44]	@ (8000458 <__libc_init_array+0x40>)
 800042a:	4c0c      	ldr	r4, [pc, #48]	@ (800045c <__libc_init_array+0x44>)
 800042c:	f000 f818 	bl	8000460 <_init>
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	2600      	movs	r6, #0
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
