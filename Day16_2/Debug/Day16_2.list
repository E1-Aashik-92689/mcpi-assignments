
Day16_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001030  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080011c0  080011c0  000021c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011f8  080011f8  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080011f8  080011f8  000021f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001200  08001200  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001200  08001200  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001204  08001204  00002204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001208  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          0000016c  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018ad  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007e9  00000000  00000000  0000492b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00005118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f9  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001946c  00000000  00000000  00005389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e71  00000000  00000000  0001e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c447  00000000  00000000  00020666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000acaad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008f8  00000000  00000000  000acaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000ad3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000049  00000000  00000000  000ad40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080011a8 	.word	0x080011a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080011a8 	.word	0x080011a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <I2CInit>:
 *      Author: admin
 */

#include "i2c.h"

void I2CInit(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	// gpio config
	// enable gpio b clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000274:	4b29      	ldr	r3, [pc, #164]	@ (800031c <I2CInit+0xac>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a28      	ldr	r2, [pc, #160]	@ (800031c <I2CInit+0xac>)
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30
	// set mode as alt fn (10)
	GPIOB->MODER |= BV(2*6+1) | BV(2*7+1);
 8000280:	4b27      	ldr	r3, [pc, #156]	@ (8000320 <I2CInit+0xb0>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a26      	ldr	r2, [pc, #152]	@ (8000320 <I2CInit+0xb0>)
 8000286:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(2*6) | BV(2*7));
 800028c:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <I2CInit+0xb0>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a23      	ldr	r2, [pc, #140]	@ (8000320 <I2CInit+0xb0>)
 8000292:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8000296:	6013      	str	r3, [r2, #0]
	// set alt fn to AF4 (i2c)
	GPIOB->AFR[0] = (4 << (4*6)) | (4 << (4*7));
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <I2CInit+0xb0>)
 800029a:	f04f 4288 	mov.w	r2, #1140850688	@ 0x44000000
 800029e:	621a      	str	r2, [r3, #32]
	// no pull up & pull down regr
	GPIOB->PUPDR &= ~(BV(2*6+1) | BV(2*7+1) | BV(2*6) | BV(2*7));
 80002a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000320 <I2CInit+0xb0>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000320 <I2CInit+0xb0>)
 80002a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80002aa:	60d3      	str	r3, [r2, #12]
	// Enable open-drain for PB6 & PB7
	GPIOB->OTYPER |= BV(6) | BV(7);
 80002ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000320 <I2CInit+0xb0>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000320 <I2CInit+0xb0>)
 80002b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80002b6:	6053      	str	r3, [r2, #4]

	// i2c config
	// enable i2c peri clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80002b8:	4b18      	ldr	r3, [pc, #96]	@ (800031c <I2CInit+0xac>)
 80002ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002bc:	4a17      	ldr	r2, [pc, #92]	@ (800031c <I2CInit+0xac>)
 80002be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002c2:	6413      	str	r3, [r2, #64]	@ 0x40
	// i2c sw reset
	I2C1->CR1 |= I2C_CR1_SWRST;
 80002c4:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <I2CInit+0xb4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a16      	ldr	r2, [pc, #88]	@ (8000324 <I2CInit+0xb4>)
 80002ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002ce:	6013      	str	r3, [r2, #0]
	I2C1->CR1 = 0;				// clear all CR1 bits
 80002d0:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <I2CInit+0xb4>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
	// peri clock -- CR2 = 16MHz
	I2C1->CR2 |= 16 << I2C_CR2_FREQ_Pos;
 80002d6:	4b13      	ldr	r3, [pc, #76]	@ (8000324 <I2CInit+0xb4>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a12      	ldr	r2, [pc, #72]	@ (8000324 <I2CInit+0xb4>)
 80002dc:	f043 0310 	orr.w	r3, r3, #16
 80002e0:	6053      	str	r3, [r2, #4]
	// set i2c clock -- CCR = 80 (Std mode=100KHz)
	I2C1->CCR = 80;
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <I2CInit+0xb4>)
 80002e4:	2250      	movs	r2, #80	@ 0x50
 80002e6:	61da      	str	r2, [r3, #28]
	I2C1->CCR &= ~I2C_CCR_FS;	// standard mode (default)
 80002e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <I2CInit+0xb4>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000324 <I2CInit+0xb4>)
 80002ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002f2:	61d3      	str	r3, [r2, #28]
	// set Trise -- TRISE = 17
	I2C1->TRISE = 17;
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <I2CInit+0xb4>)
 80002f6:	2211      	movs	r2, #17
 80002f8:	621a      	str	r2, [r3, #32]
	// enable ack
	I2C1->CR1 |= I2C_CR1_ACK;
 80002fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <I2CInit+0xb4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a09      	ldr	r2, [pc, #36]	@ (8000324 <I2CInit+0xb4>)
 8000300:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000304:	6013      	str	r3, [r2, #0]
	// enable i2c peri
	I2C1->CR1 |= I2C_CR1_PE;
 8000306:	4b07      	ldr	r3, [pc, #28]	@ (8000324 <I2CInit+0xb4>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a06      	ldr	r2, [pc, #24]	@ (8000324 <I2CInit+0xb4>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40020400 	.word	0x40020400
 8000324:	40005400 	.word	0x40005400

08000328 <I2CStart>:

void I2CStart(void) {
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	// send start bit
	I2C1->CR1 |= I2C_CR1_START;
 800032c:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <I2CStart+0x28>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a07      	ldr	r2, [pc, #28]	@ (8000350 <I2CStart+0x28>)
 8000332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000336:	6013      	str	r3, [r2, #0]
	// wait for start bit sent on bus
	while(!(I2C1->SR1 & I2C_SR1_SB));	// while((I2C1->SR1 & I2C_SR1_SB) == 0);
 8000338:	bf00      	nop
 800033a:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <I2CStart+0x28>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f9      	beq.n	800033a <I2CStart+0x12>
}
 8000346:	bf00      	nop
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40005400 	.word	0x40005400

08000354 <I2CStop>:

void I2CRepeatStart(void) {
	I2CStart();
}

void I2CStop(void) {
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	// send stop bit
	I2C1->CR1 |= I2C_CR1_STOP;
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <I2CStop+0x28>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a07      	ldr	r2, [pc, #28]	@ (800037c <I2CStop+0x28>)
 800035e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000362:	6013      	str	r3, [r2, #0]
	// wait for stop bit sent on bus
	while(I2C1->SR2 & I2C_SR2_BUSY);		// while((I2C1->SR2 & I2C_SR2_BUSY) != 0);
 8000364:	bf00      	nop
 8000366:	4b05      	ldr	r3, [pc, #20]	@ (800037c <I2CStop+0x28>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0302 	and.w	r3, r3, #2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d1f9      	bne.n	8000366 <I2CStop+0x12>
}
 8000372:	bf00      	nop
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	40005400 	.word	0x40005400

08000380 <I2CSendSlaveAddr>:

void I2CSendSlaveAddr(uint8_t addr) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	// write slave addr in DR
	I2C1->DR = addr;
 800038a:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <I2CSendSlaveAddr+0x30>)
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	6113      	str	r3, [r2, #16]
	// wait until slave addr is sent
	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000390:	bf00      	nop
 8000392:	4b07      	ldr	r3, [pc, #28]	@ (80003b0 <I2CSendSlaveAddr+0x30>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f9      	beq.n	8000392 <I2CSendSlaveAddr+0x12>
	// read status regrs to clear acks
	(void)I2C1->SR1;
 800039e:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <I2CSendSlaveAddr+0x30>)
 80003a0:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 80003a2:	4b03      	ldr	r3, [pc, #12]	@ (80003b0 <I2CSendSlaveAddr+0x30>)
 80003a4:	699b      	ldr	r3, [r3, #24]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40005400 	.word	0x40005400

080003b4 <I2CSendData>:

void I2CSendData(uint8_t data) {
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	// wait until data is sent
	while(!(I2C1->SR1 & I2C_SR1_TXE));
 80003be:	bf00      	nop
 80003c0:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <I2CSendData+0x38>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d0f9      	beq.n	80003c0 <I2CSendData+0xc>
	// write data in DR
	I2C1->DR = data;
 80003cc:	4a07      	ldr	r2, [pc, #28]	@ (80003ec <I2CSendData+0x38>)
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	6113      	str	r3, [r2, #16]
	// poll for BTF is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80003d2:	bf00      	nop
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <I2CSendData+0x38>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f9      	beq.n	80003d4 <I2CSendData+0x20>
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40005400 	.word	0x40005400

080003f0 <I2CWrite>:
	while(!(I2C1->SR1 & I2C_SR1_RXNE));
	// collect received data and return it
	return I2C1->DR;
}

void I2CWrite(uint8_t addr, uint8_t data) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	460a      	mov	r2, r1
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	4613      	mov	r3, r2
 80003fe:	71bb      	strb	r3, [r7, #6]
	I2CStart();
 8000400:	f7ff ff92 	bl	8000328 <I2CStart>
	I2CSendSlaveAddr(addr);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffba 	bl	8000380 <I2CSendSlaveAddr>
	I2CSendData(data);
 800040c:	79bb      	ldrb	r3, [r7, #6]
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ffd0 	bl	80003b4 <I2CSendData>
	I2CStop();
 8000414:	f7ff ff9e 	bl	8000354 <I2CStop>
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <DelayMs+0x44>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <DelayMs+0x48>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <DelayMs+0x4c>)
 8000434:	fba2 2303 	umull	r2, r3, r2, r3
 8000438:	099b      	lsrs	r3, r3, #6
 800043a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	fb02 f303 	mul.w	r3, r2, r3
 8000444:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000446:	bf00      	nop
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <DelayMs+0x44>)
 800044a:	685a      	ldr	r2, [r3, #4]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	1ad2      	subs	r2, r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	429a      	cmp	r2, r3
 8000454:	d3f8      	bcc.n	8000448 <DelayMs+0x28>
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e0001000 	.word	0xe0001000
 8000468:	20000000 	.word	0x20000000
 800046c:	10624dd3 	.word	0x10624dd3

08000470 <LcdInit>:
 *      Author: admin
 */

#include "lcd.h"

void LcdInit(void) {
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	// i2c initialization
	I2CInit();
 8000474:	f7ff fefc 	bl	8000270 <I2CInit>
	// lcd initialization
	DelayMs(20);
 8000478:	2014      	movs	r0, #20
 800047a:	f7ff ffd1 	bl	8000420 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 800047e:	2103      	movs	r1, #3
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f82e 	bl	80004e2 <LcdWriteNibble>
	DelayMs(5);
 8000486:	2005      	movs	r0, #5
 8000488:	f7ff ffca 	bl	8000420 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 800048c:	2103      	movs	r1, #3
 800048e:	2000      	movs	r0, #0
 8000490:	f000 f827 	bl	80004e2 <LcdWriteNibble>
	DelayMs(1);
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff ffc3 	bl	8000420 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 800049a:	2103      	movs	r1, #3
 800049c:	2000      	movs	r0, #0
 800049e:	f000 f820 	bl	80004e2 <LcdWriteNibble>
	DelayMs(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f7ff ffbc 	bl	8000420 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x02);
 80004a8:	2102      	movs	r1, #2
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 f819 	bl	80004e2 <LcdWriteNibble>
	DelayMs(1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f7ff ffb5 	bl	8000420 <DelayMs>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 80004b6:	2128      	movs	r1, #40	@ 0x28
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 f84a 	bl	8000552 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 80004be:	2108      	movs	r1, #8
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 f846 	bl	8000552 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 80004c6:	2101      	movs	r1, #1
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 f842 	bl	8000552 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 80004ce:	2106      	movs	r1, #6
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 f83e 	bl	8000552 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 80004d6:	210c      	movs	r1, #12
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 f83a 	bl	8000552 <LcdWriteByte>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b084      	sub	sp, #16
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	460a      	mov	r2, r1
 80004ec:	71fb      	strb	r3, [r7, #7]
 80004ee:	4613      	mov	r3, r2
 80004f0:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	bf0c      	ite	eq
 80004f8:	2301      	moveq	r3, #1
 80004fa:	2300      	movne	r3, #0
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 8000500:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000504:	011b      	lsls	r3, r3, #4
 8000506:	b25a      	sxtb	r2, r3
 8000508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050c:	4313      	orrs	r3, r2
 800050e:	b25b      	sxtb	r3, r3
 8000510:	f043 030c 	orr.w	r3, r3, #12
 8000514:	b25b      	sxtb	r3, r3
 8000516:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 8000518:	7bbb      	ldrb	r3, [r7, #14]
 800051a:	4619      	mov	r1, r3
 800051c:	204e      	movs	r0, #78	@ 0x4e
 800051e:	f7ff ff67 	bl	80003f0 <I2CWrite>
	DelayMs(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff ff7c 	bl	8000420 <DelayMs>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 8000528:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800052c:	011b      	lsls	r3, r3, #4
 800052e:	b25a      	sxtb	r2, r3
 8000530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000534:	4313      	orrs	r3, r2
 8000536:	b25b      	sxtb	r3, r3
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b25b      	sxtb	r3, r3
 800053e:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	4619      	mov	r1, r3
 8000544:	204e      	movs	r0, #78	@ 0x4e
 8000546:	f7ff ff53 	bl	80003f0 <I2CWrite>
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <LcdWriteByte>:

void LcdWriteByte(uint8_t rs, uint8_t data) {
 8000552:	b580      	push	{r7, lr}
 8000554:	b084      	sub	sp, #16
 8000556:	af00      	add	r7, sp, #0
 8000558:	4603      	mov	r3, r0
 800055a:	460a      	mov	r2, r1
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	4613      	mov	r3, r2
 8000560:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	091b      	lsrs	r3, r3, #4
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	f003 030f 	and.w	r3, r3, #15
 800056e:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 8000570:	7bfa      	ldrb	r2, [r7, #15]
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffb3 	bl	80004e2 <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 800057c:	7bba      	ldrb	r2, [r7, #14]
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffad 	bl	80004e2 <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	DelayMs(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f7ff ff49 	bl	8000420 <DelayMs>
}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 8000596:	b580      	push	{r7, lr}
 8000598:	b084      	sub	sp, #16
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	6039      	str	r1, [r7, #0]
 80005a0:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff ffd3 	bl	8000552 <LcdWriteByte>
	// write chars one by one
	for(int i=0; str[i] != '\0'; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e00a      	b.n	80005c8 <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4619      	mov	r1, r3
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff ffc8 	bl	8000552 <LcdWriteByte>
	for(int i=0; str[i] != '\0'; i++)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3301      	adds	r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1ee      	bne.n	80005b2 <LcdPuts+0x1c>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <DelayMs+0x44>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <DelayMs+0x48>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	@ (800062c <DelayMs+0x4c>)
 80005f4:	fba2 2303 	umull	r2, r3, r2, r3
 80005f8:	099b      	lsrs	r3, r3, #6
 80005fa:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	fb02 f303 	mul.w	r3, r2, r3
 8000604:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000606:	bf00      	nop
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <DelayMs+0x44>)
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	1ad2      	subs	r2, r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	429a      	cmp	r2, r3
 8000614:	d3f8      	bcc.n	8000608 <DelayMs+0x28>
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e0001000 	.word	0xe0001000
 8000628:	20000000 	.word	0x20000000
 800062c:	10624dd3 	.word	0x10624dd3

08000630 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
extern int GC;
int main(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	char str[5];
	LcdInit();
 8000636:	f7ff ff1b 	bl	8000470 <LcdInit>
	TimerInit(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063e:	f000 f89d 	bl	800077c <TimerInit>
	while(1)
	{
		sprintf(str,"%d ",GC);
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <main+0x34>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	463b      	mov	r3, r7
 8000648:	4907      	ldr	r1, [pc, #28]	@ (8000668 <main+0x38>)
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f914 	bl	8000878 <siprintf>
		LcdPuts(LCD_LINE1,str);
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	2080      	movs	r0, #128	@ 0x80
 8000656:	f7ff ff9e 	bl	8000596 <LcdPuts>
		DelayMs(100);
 800065a:	2064      	movs	r0, #100	@ 0x64
 800065c:	f7ff ffc0 	bl	80005e0 <DelayMs>
		sprintf(str,"%d ",GC);
 8000660:	bf00      	nop
 8000662:	e7ee      	b.n	8000642 <main+0x12>
 8000664:	20000074 	.word	0x20000074
 8000668:	080011c0 	.word	0x080011c0

0800066c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000674:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <_sbrk+0x5c>)
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <_sbrk+0x60>)
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <_sbrk+0x64>)
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <_sbrk+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	429a      	cmp	r2, r3
 800069a:	d207      	bcs.n	80006ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800069c:	f000 f90e 	bl	80008bc <__errno>
 80006a0:	4603      	mov	r3, r0
 80006a2:	220c      	movs	r2, #12
 80006a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006aa:	e009      	b.n	80006c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <_sbrk+0x64>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b2:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <_sbrk+0x64>)
 80006bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20020000 	.word	0x20020000
 80006cc:	00000400 	.word	0x00000400
 80006d0:	20000070 	.word	0x20000070
 80006d4:	200001c0 	.word	0x200001c0

080006d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 80006dc:	f000 f802 	bl	80006e4 <DWT_Init>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <DWT_Init+0x58>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4a13      	ldr	r2, [pc, #76]	@ (800073c <DWT_Init+0x58>)
 80006ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80006f2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <DWT_Init+0x58>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4a10      	ldr	r2, [pc, #64]	@ (800073c <DWT_Init+0x58>)
 80006fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006fe:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <DWT_Init+0x5c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0e      	ldr	r2, [pc, #56]	@ (8000740 <DWT_Init+0x5c>)
 8000706:	f023 0301 	bic.w	r3, r3, #1
 800070a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <DWT_Init+0x5c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <DWT_Init+0x5c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <DWT_Init+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800071e:	bf00      	nop
    __ASM volatile ("NOP");
 8000720:	bf00      	nop
    __ASM volatile ("NOP");
 8000722:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <DWT_Init+0x5c>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	bf0c      	ite	eq
 800072c:	2301      	moveq	r3, #1
 800072e:	2300      	movne	r3, #0
 8000730:	b2db      	uxtb	r3, r3
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000edf0 	.word	0xe000edf0
 8000740:	e0001000 	.word	0xe0001000

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4906      	ldr	r1, [pc, #24]	@ (8000778 <__NVIC_EnableIRQ+0x34>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100

0800077c <TimerInit>:
 */

#include "timer.h"

int GC = 0;
void TimerInit(uint32_t ms) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	// Enable Timer APB clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <TimerInit+0x64>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a15      	ldr	r2, [pc, #84]	@ (80007e0 <TimerInit+0x64>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
	// Set the Prescalar
	TIM7->PSC = PR - 1;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <TimerInit+0x68>)
 8000792:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
	// calculate number of clocks to count
	uint32_t cnt = (FPCLK / 1000) * ms / PR;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800079e:	fb02 f303 	mul.w	r3, r2, r3
 80007a2:	4a11      	ldr	r2, [pc, #68]	@ (80007e8 <TimerInit+0x6c>)
 80007a4:	fba2 2303 	umull	r2, r3, r2, r3
 80007a8:	0a9b      	lsrs	r3, r3, #10
 80007aa:	60fb      	str	r3, [r7, #12]
	// set max count in ARR
	TIM7->ARR = cnt - 1;
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <TimerInit+0x68>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
	// start counting from zero
	TIM7->CNT = 0;
 80007b4:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <TimerInit+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
	// enable the timer interrupt in peripheral
	TIM7->DIER |= TIM_DIER_UIE;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <TimerInit+0x68>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <TimerInit+0x68>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	60d3      	str	r3, [r2, #12]
	// enable the timer interrupt in NVIC
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007c6:	2036      	movs	r0, #54	@ 0x36
 80007c8:	f7ff ffbc 	bl	8000744 <__NVIC_EnableIRQ>
	// enable timer clock (mandatory) and set APRE (optional)
	TIM7->CR1 |= TIM_CR1_CEN;
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <TimerInit+0x68>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <TimerInit+0x68>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40001400 	.word	0x40001400
 80007e8:	10624dd3 	.word	0x10624dd3

080007ec <TIM6_DAC_IRQHandler>:

// implement Interrupt Handler for TIM6
void TIM6_DAC_IRQHandler(void) {
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	// check if TIM7 interrupt occurred.
	if(TIM7->SR & TIM_SR_UIF) {
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <TIM6_DAC_IRQHandler+0x30>)
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00a      	beq.n	8000812 <TIM6_DAC_IRQHandler+0x26>
		// Increment Global Count
		GC++;
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <TIM6_DAC_IRQHandler+0x34>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <TIM6_DAC_IRQHandler+0x34>)
 8000804:	6013      	str	r3, [r2, #0]
		// Clear/Ack TIM7 interrupt
		TIM7->SR &= ~TIM_SR_UIF;
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <TIM6_DAC_IRQHandler+0x30>)
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	4a04      	ldr	r2, [pc, #16]	@ (800081c <TIM6_DAC_IRQHandler+0x30>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	6113      	str	r3, [r2, #16]
	}
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40001400 	.word	0x40001400
 8000820:	20000074 	.word	0x20000074

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480d      	ldr	r0, [pc, #52]	@ (800085c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000828:	f7ff ff56 	bl	80006d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	@ (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	@ (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000852:	f000 f839 	bl	80008c8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000856:	f7ff feeb 	bl	8000630 <main>

0800085a <LoopForever>:

LoopForever:
  b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   r0, =_estack
 800085c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000868:	08001208 	.word	0x08001208
  ldr r2, =_sbss
 800086c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000870:	200001c0 	.word	0x200001c0

08000874 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC_IRQHandler>
	...

08000878 <siprintf>:
 8000878:	b40e      	push	{r1, r2, r3}
 800087a:	b510      	push	{r4, lr}
 800087c:	b09d      	sub	sp, #116	@ 0x74
 800087e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000880:	9002      	str	r0, [sp, #8]
 8000882:	9006      	str	r0, [sp, #24]
 8000884:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000888:	480a      	ldr	r0, [pc, #40]	@ (80008b4 <siprintf+0x3c>)
 800088a:	9107      	str	r1, [sp, #28]
 800088c:	9104      	str	r1, [sp, #16]
 800088e:	490a      	ldr	r1, [pc, #40]	@ (80008b8 <siprintf+0x40>)
 8000890:	f853 2b04 	ldr.w	r2, [r3], #4
 8000894:	9105      	str	r1, [sp, #20]
 8000896:	2400      	movs	r4, #0
 8000898:	a902      	add	r1, sp, #8
 800089a:	6800      	ldr	r0, [r0, #0]
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80008a0:	f000 f98c 	bl	8000bbc <_svfiprintf_r>
 80008a4:	9b02      	ldr	r3, [sp, #8]
 80008a6:	701c      	strb	r4, [r3, #0]
 80008a8:	b01d      	add	sp, #116	@ 0x74
 80008aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ae:	b003      	add	sp, #12
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000004 	.word	0x20000004
 80008b8:	ffff0208 	.word	0xffff0208

080008bc <__errno>:
 80008bc:	4b01      	ldr	r3, [pc, #4]	@ (80008c4 <__errno+0x8>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000004 	.word	0x20000004

080008c8 <__libc_init_array>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000900 <__libc_init_array+0x38>)
 80008cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000904 <__libc_init_array+0x3c>)
 80008ce:	1b64      	subs	r4, r4, r5
 80008d0:	10a4      	asrs	r4, r4, #2
 80008d2:	2600      	movs	r6, #0
 80008d4:	42a6      	cmp	r6, r4
 80008d6:	d109      	bne.n	80008ec <__libc_init_array+0x24>
 80008d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000908 <__libc_init_array+0x40>)
 80008da:	4c0c      	ldr	r4, [pc, #48]	@ (800090c <__libc_init_array+0x44>)
 80008dc:	f000 fc64 	bl	80011a8 <_init>
 80008e0:	1b64      	subs	r4, r4, r5
 80008e2:	10a4      	asrs	r4, r4, #2
 80008e4:	2600      	movs	r6, #0
 80008e6:	42a6      	cmp	r6, r4
 80008e8:	d105      	bne.n	80008f6 <__libc_init_array+0x2e>
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f0:	4798      	blx	r3
 80008f2:	3601      	adds	r6, #1
 80008f4:	e7ee      	b.n	80008d4 <__libc_init_array+0xc>
 80008f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fa:	4798      	blx	r3
 80008fc:	3601      	adds	r6, #1
 80008fe:	e7f2      	b.n	80008e6 <__libc_init_array+0x1e>
 8000900:	08001200 	.word	0x08001200
 8000904:	08001200 	.word	0x08001200
 8000908:	08001200 	.word	0x08001200
 800090c:	08001204 	.word	0x08001204

08000910 <__retarget_lock_acquire_recursive>:
 8000910:	4770      	bx	lr

08000912 <__retarget_lock_release_recursive>:
 8000912:	4770      	bx	lr

08000914 <_free_r>:
 8000914:	b538      	push	{r3, r4, r5, lr}
 8000916:	4605      	mov	r5, r0
 8000918:	2900      	cmp	r1, #0
 800091a:	d041      	beq.n	80009a0 <_free_r+0x8c>
 800091c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000920:	1f0c      	subs	r4, r1, #4
 8000922:	2b00      	cmp	r3, #0
 8000924:	bfb8      	it	lt
 8000926:	18e4      	addlt	r4, r4, r3
 8000928:	f000 f8e0 	bl	8000aec <__malloc_lock>
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <_free_r+0x90>)
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	b933      	cbnz	r3, 8000940 <_free_r+0x2c>
 8000932:	6063      	str	r3, [r4, #4]
 8000934:	6014      	str	r4, [r2, #0]
 8000936:	4628      	mov	r0, r5
 8000938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800093c:	f000 b8dc 	b.w	8000af8 <__malloc_unlock>
 8000940:	42a3      	cmp	r3, r4
 8000942:	d908      	bls.n	8000956 <_free_r+0x42>
 8000944:	6820      	ldr	r0, [r4, #0]
 8000946:	1821      	adds	r1, r4, r0
 8000948:	428b      	cmp	r3, r1
 800094a:	bf01      	itttt	eq
 800094c:	6819      	ldreq	r1, [r3, #0]
 800094e:	685b      	ldreq	r3, [r3, #4]
 8000950:	1809      	addeq	r1, r1, r0
 8000952:	6021      	streq	r1, [r4, #0]
 8000954:	e7ed      	b.n	8000932 <_free_r+0x1e>
 8000956:	461a      	mov	r2, r3
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	b10b      	cbz	r3, 8000960 <_free_r+0x4c>
 800095c:	42a3      	cmp	r3, r4
 800095e:	d9fa      	bls.n	8000956 <_free_r+0x42>
 8000960:	6811      	ldr	r1, [r2, #0]
 8000962:	1850      	adds	r0, r2, r1
 8000964:	42a0      	cmp	r0, r4
 8000966:	d10b      	bne.n	8000980 <_free_r+0x6c>
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	4401      	add	r1, r0
 800096c:	1850      	adds	r0, r2, r1
 800096e:	4283      	cmp	r3, r0
 8000970:	6011      	str	r1, [r2, #0]
 8000972:	d1e0      	bne.n	8000936 <_free_r+0x22>
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	6053      	str	r3, [r2, #4]
 800097a:	4408      	add	r0, r1
 800097c:	6010      	str	r0, [r2, #0]
 800097e:	e7da      	b.n	8000936 <_free_r+0x22>
 8000980:	d902      	bls.n	8000988 <_free_r+0x74>
 8000982:	230c      	movs	r3, #12
 8000984:	602b      	str	r3, [r5, #0]
 8000986:	e7d6      	b.n	8000936 <_free_r+0x22>
 8000988:	6820      	ldr	r0, [r4, #0]
 800098a:	1821      	adds	r1, r4, r0
 800098c:	428b      	cmp	r3, r1
 800098e:	bf04      	itt	eq
 8000990:	6819      	ldreq	r1, [r3, #0]
 8000992:	685b      	ldreq	r3, [r3, #4]
 8000994:	6063      	str	r3, [r4, #4]
 8000996:	bf04      	itt	eq
 8000998:	1809      	addeq	r1, r1, r0
 800099a:	6021      	streq	r1, [r4, #0]
 800099c:	6054      	str	r4, [r2, #4]
 800099e:	e7ca      	b.n	8000936 <_free_r+0x22>
 80009a0:	bd38      	pop	{r3, r4, r5, pc}
 80009a2:	bf00      	nop
 80009a4:	200001bc 	.word	0x200001bc

080009a8 <sbrk_aligned>:
 80009a8:	b570      	push	{r4, r5, r6, lr}
 80009aa:	4e0f      	ldr	r6, [pc, #60]	@ (80009e8 <sbrk_aligned+0x40>)
 80009ac:	460c      	mov	r4, r1
 80009ae:	6831      	ldr	r1, [r6, #0]
 80009b0:	4605      	mov	r5, r0
 80009b2:	b911      	cbnz	r1, 80009ba <sbrk_aligned+0x12>
 80009b4:	f000 fba4 	bl	8001100 <_sbrk_r>
 80009b8:	6030      	str	r0, [r6, #0]
 80009ba:	4621      	mov	r1, r4
 80009bc:	4628      	mov	r0, r5
 80009be:	f000 fb9f 	bl	8001100 <_sbrk_r>
 80009c2:	1c43      	adds	r3, r0, #1
 80009c4:	d103      	bne.n	80009ce <sbrk_aligned+0x26>
 80009c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80009ca:	4620      	mov	r0, r4
 80009cc:	bd70      	pop	{r4, r5, r6, pc}
 80009ce:	1cc4      	adds	r4, r0, #3
 80009d0:	f024 0403 	bic.w	r4, r4, #3
 80009d4:	42a0      	cmp	r0, r4
 80009d6:	d0f8      	beq.n	80009ca <sbrk_aligned+0x22>
 80009d8:	1a21      	subs	r1, r4, r0
 80009da:	4628      	mov	r0, r5
 80009dc:	f000 fb90 	bl	8001100 <_sbrk_r>
 80009e0:	3001      	adds	r0, #1
 80009e2:	d1f2      	bne.n	80009ca <sbrk_aligned+0x22>
 80009e4:	e7ef      	b.n	80009c6 <sbrk_aligned+0x1e>
 80009e6:	bf00      	nop
 80009e8:	200001b8 	.word	0x200001b8

080009ec <_malloc_r>:
 80009ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009f0:	1ccd      	adds	r5, r1, #3
 80009f2:	f025 0503 	bic.w	r5, r5, #3
 80009f6:	3508      	adds	r5, #8
 80009f8:	2d0c      	cmp	r5, #12
 80009fa:	bf38      	it	cc
 80009fc:	250c      	movcc	r5, #12
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	4606      	mov	r6, r0
 8000a02:	db01      	blt.n	8000a08 <_malloc_r+0x1c>
 8000a04:	42a9      	cmp	r1, r5
 8000a06:	d904      	bls.n	8000a12 <_malloc_r+0x26>
 8000a08:	230c      	movs	r3, #12
 8000a0a:	6033      	str	r3, [r6, #0]
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ae8 <_malloc_r+0xfc>
 8000a16:	f000 f869 	bl	8000aec <__malloc_lock>
 8000a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a1e:	461c      	mov	r4, r3
 8000a20:	bb44      	cbnz	r4, 8000a74 <_malloc_r+0x88>
 8000a22:	4629      	mov	r1, r5
 8000a24:	4630      	mov	r0, r6
 8000a26:	f7ff ffbf 	bl	80009a8 <sbrk_aligned>
 8000a2a:	1c43      	adds	r3, r0, #1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	d158      	bne.n	8000ae2 <_malloc_r+0xf6>
 8000a30:	f8d8 4000 	ldr.w	r4, [r8]
 8000a34:	4627      	mov	r7, r4
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d143      	bne.n	8000ac2 <_malloc_r+0xd6>
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d04b      	beq.n	8000ad6 <_malloc_r+0xea>
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	4639      	mov	r1, r7
 8000a42:	4630      	mov	r0, r6
 8000a44:	eb04 0903 	add.w	r9, r4, r3
 8000a48:	f000 fb5a 	bl	8001100 <_sbrk_r>
 8000a4c:	4581      	cmp	r9, r0
 8000a4e:	d142      	bne.n	8000ad6 <_malloc_r+0xea>
 8000a50:	6821      	ldr	r1, [r4, #0]
 8000a52:	1a6d      	subs	r5, r5, r1
 8000a54:	4629      	mov	r1, r5
 8000a56:	4630      	mov	r0, r6
 8000a58:	f7ff ffa6 	bl	80009a8 <sbrk_aligned>
 8000a5c:	3001      	adds	r0, #1
 8000a5e:	d03a      	beq.n	8000ad6 <_malloc_r+0xea>
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	442b      	add	r3, r5
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	f8d8 3000 	ldr.w	r3, [r8]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	bb62      	cbnz	r2, 8000ac8 <_malloc_r+0xdc>
 8000a6e:	f8c8 7000 	str.w	r7, [r8]
 8000a72:	e00f      	b.n	8000a94 <_malloc_r+0xa8>
 8000a74:	6822      	ldr	r2, [r4, #0]
 8000a76:	1b52      	subs	r2, r2, r5
 8000a78:	d420      	bmi.n	8000abc <_malloc_r+0xd0>
 8000a7a:	2a0b      	cmp	r2, #11
 8000a7c:	d917      	bls.n	8000aae <_malloc_r+0xc2>
 8000a7e:	1961      	adds	r1, r4, r5
 8000a80:	42a3      	cmp	r3, r4
 8000a82:	6025      	str	r5, [r4, #0]
 8000a84:	bf18      	it	ne
 8000a86:	6059      	strne	r1, [r3, #4]
 8000a88:	6863      	ldr	r3, [r4, #4]
 8000a8a:	bf08      	it	eq
 8000a8c:	f8c8 1000 	streq.w	r1, [r8]
 8000a90:	5162      	str	r2, [r4, r5]
 8000a92:	604b      	str	r3, [r1, #4]
 8000a94:	4630      	mov	r0, r6
 8000a96:	f000 f82f 	bl	8000af8 <__malloc_unlock>
 8000a9a:	f104 000b 	add.w	r0, r4, #11
 8000a9e:	1d23      	adds	r3, r4, #4
 8000aa0:	f020 0007 	bic.w	r0, r0, #7
 8000aa4:	1ac2      	subs	r2, r0, r3
 8000aa6:	bf1c      	itt	ne
 8000aa8:	1a1b      	subne	r3, r3, r0
 8000aaa:	50a3      	strne	r3, [r4, r2]
 8000aac:	e7af      	b.n	8000a0e <_malloc_r+0x22>
 8000aae:	6862      	ldr	r2, [r4, #4]
 8000ab0:	42a3      	cmp	r3, r4
 8000ab2:	bf0c      	ite	eq
 8000ab4:	f8c8 2000 	streq.w	r2, [r8]
 8000ab8:	605a      	strne	r2, [r3, #4]
 8000aba:	e7eb      	b.n	8000a94 <_malloc_r+0xa8>
 8000abc:	4623      	mov	r3, r4
 8000abe:	6864      	ldr	r4, [r4, #4]
 8000ac0:	e7ae      	b.n	8000a20 <_malloc_r+0x34>
 8000ac2:	463c      	mov	r4, r7
 8000ac4:	687f      	ldr	r7, [r7, #4]
 8000ac6:	e7b6      	b.n	8000a36 <_malloc_r+0x4a>
 8000ac8:	461a      	mov	r2, r3
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	42a3      	cmp	r3, r4
 8000ace:	d1fb      	bne.n	8000ac8 <_malloc_r+0xdc>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	6053      	str	r3, [r2, #4]
 8000ad4:	e7de      	b.n	8000a94 <_malloc_r+0xa8>
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	6033      	str	r3, [r6, #0]
 8000ada:	4630      	mov	r0, r6
 8000adc:	f000 f80c 	bl	8000af8 <__malloc_unlock>
 8000ae0:	e794      	b.n	8000a0c <_malloc_r+0x20>
 8000ae2:	6005      	str	r5, [r0, #0]
 8000ae4:	e7d6      	b.n	8000a94 <_malloc_r+0xa8>
 8000ae6:	bf00      	nop
 8000ae8:	200001bc 	.word	0x200001bc

08000aec <__malloc_lock>:
 8000aec:	4801      	ldr	r0, [pc, #4]	@ (8000af4 <__malloc_lock+0x8>)
 8000aee:	f7ff bf0f 	b.w	8000910 <__retarget_lock_acquire_recursive>
 8000af2:	bf00      	nop
 8000af4:	200001b4 	.word	0x200001b4

08000af8 <__malloc_unlock>:
 8000af8:	4801      	ldr	r0, [pc, #4]	@ (8000b00 <__malloc_unlock+0x8>)
 8000afa:	f7ff bf0a 	b.w	8000912 <__retarget_lock_release_recursive>
 8000afe:	bf00      	nop
 8000b00:	200001b4 	.word	0x200001b4

08000b04 <__ssputs_r>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	688e      	ldr	r6, [r1, #8]
 8000b0a:	461f      	mov	r7, r3
 8000b0c:	42be      	cmp	r6, r7
 8000b0e:	680b      	ldr	r3, [r1, #0]
 8000b10:	4682      	mov	sl, r0
 8000b12:	460c      	mov	r4, r1
 8000b14:	4690      	mov	r8, r2
 8000b16:	d82d      	bhi.n	8000b74 <__ssputs_r+0x70>
 8000b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000b20:	d026      	beq.n	8000b70 <__ssputs_r+0x6c>
 8000b22:	6965      	ldr	r5, [r4, #20]
 8000b24:	6909      	ldr	r1, [r1, #16]
 8000b26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b2a:	eba3 0901 	sub.w	r9, r3, r1
 8000b2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b32:	1c7b      	adds	r3, r7, #1
 8000b34:	444b      	add	r3, r9
 8000b36:	106d      	asrs	r5, r5, #1
 8000b38:	429d      	cmp	r5, r3
 8000b3a:	bf38      	it	cc
 8000b3c:	461d      	movcc	r5, r3
 8000b3e:	0553      	lsls	r3, r2, #21
 8000b40:	d527      	bpl.n	8000b92 <__ssputs_r+0x8e>
 8000b42:	4629      	mov	r1, r5
 8000b44:	f7ff ff52 	bl	80009ec <_malloc_r>
 8000b48:	4606      	mov	r6, r0
 8000b4a:	b360      	cbz	r0, 8000ba6 <__ssputs_r+0xa2>
 8000b4c:	6921      	ldr	r1, [r4, #16]
 8000b4e:	464a      	mov	r2, r9
 8000b50:	f000 fae6 	bl	8001120 <memcpy>
 8000b54:	89a3      	ldrh	r3, [r4, #12]
 8000b56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b5e:	81a3      	strh	r3, [r4, #12]
 8000b60:	6126      	str	r6, [r4, #16]
 8000b62:	6165      	str	r5, [r4, #20]
 8000b64:	444e      	add	r6, r9
 8000b66:	eba5 0509 	sub.w	r5, r5, r9
 8000b6a:	6026      	str	r6, [r4, #0]
 8000b6c:	60a5      	str	r5, [r4, #8]
 8000b6e:	463e      	mov	r6, r7
 8000b70:	42be      	cmp	r6, r7
 8000b72:	d900      	bls.n	8000b76 <__ssputs_r+0x72>
 8000b74:	463e      	mov	r6, r7
 8000b76:	6820      	ldr	r0, [r4, #0]
 8000b78:	4632      	mov	r2, r6
 8000b7a:	4641      	mov	r1, r8
 8000b7c:	f000 faa6 	bl	80010cc <memmove>
 8000b80:	68a3      	ldr	r3, [r4, #8]
 8000b82:	1b9b      	subs	r3, r3, r6
 8000b84:	60a3      	str	r3, [r4, #8]
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	4433      	add	r3, r6
 8000b8a:	6023      	str	r3, [r4, #0]
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	462a      	mov	r2, r5
 8000b94:	f000 fad2 	bl	800113c <_realloc_r>
 8000b98:	4606      	mov	r6, r0
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d1e0      	bne.n	8000b60 <__ssputs_r+0x5c>
 8000b9e:	6921      	ldr	r1, [r4, #16]
 8000ba0:	4650      	mov	r0, sl
 8000ba2:	f7ff feb7 	bl	8000914 <_free_r>
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	f8ca 3000 	str.w	r3, [sl]
 8000bac:	89a3      	ldrh	r3, [r4, #12]
 8000bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb2:	81a3      	strh	r3, [r4, #12]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb8:	e7e9      	b.n	8000b8e <__ssputs_r+0x8a>
	...

08000bbc <_svfiprintf_r>:
 8000bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	898b      	ldrh	r3, [r1, #12]
 8000bc4:	061b      	lsls	r3, r3, #24
 8000bc6:	b09d      	sub	sp, #116	@ 0x74
 8000bc8:	4607      	mov	r7, r0
 8000bca:	460d      	mov	r5, r1
 8000bcc:	4614      	mov	r4, r2
 8000bce:	d510      	bpl.n	8000bf2 <_svfiprintf_r+0x36>
 8000bd0:	690b      	ldr	r3, [r1, #16]
 8000bd2:	b973      	cbnz	r3, 8000bf2 <_svfiprintf_r+0x36>
 8000bd4:	2140      	movs	r1, #64	@ 0x40
 8000bd6:	f7ff ff09 	bl	80009ec <_malloc_r>
 8000bda:	6028      	str	r0, [r5, #0]
 8000bdc:	6128      	str	r0, [r5, #16]
 8000bde:	b930      	cbnz	r0, 8000bee <_svfiprintf_r+0x32>
 8000be0:	230c      	movs	r3, #12
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be8:	b01d      	add	sp, #116	@ 0x74
 8000bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bee:	2340      	movs	r3, #64	@ 0x40
 8000bf0:	616b      	str	r3, [r5, #20]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bf6:	2320      	movs	r3, #32
 8000bf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c00:	2330      	movs	r3, #48	@ 0x30
 8000c02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000da0 <_svfiprintf_r+0x1e4>
 8000c06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c0a:	f04f 0901 	mov.w	r9, #1
 8000c0e:	4623      	mov	r3, r4
 8000c10:	469a      	mov	sl, r3
 8000c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c16:	b10a      	cbz	r2, 8000c1c <_svfiprintf_r+0x60>
 8000c18:	2a25      	cmp	r2, #37	@ 0x25
 8000c1a:	d1f9      	bne.n	8000c10 <_svfiprintf_r+0x54>
 8000c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8000c20:	d00b      	beq.n	8000c3a <_svfiprintf_r+0x7e>
 8000c22:	465b      	mov	r3, fp
 8000c24:	4622      	mov	r2, r4
 8000c26:	4629      	mov	r1, r5
 8000c28:	4638      	mov	r0, r7
 8000c2a:	f7ff ff6b 	bl	8000b04 <__ssputs_r>
 8000c2e:	3001      	adds	r0, #1
 8000c30:	f000 80a7 	beq.w	8000d82 <_svfiprintf_r+0x1c6>
 8000c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c36:	445a      	add	r2, fp
 8000c38:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 809f 	beq.w	8000d82 <_svfiprintf_r+0x1c6>
 8000c44:	2300      	movs	r3, #0
 8000c46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c4e:	f10a 0a01 	add.w	sl, sl, #1
 8000c52:	9304      	str	r3, [sp, #16]
 8000c54:	9307      	str	r3, [sp, #28]
 8000c56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c5c:	4654      	mov	r4, sl
 8000c5e:	2205      	movs	r2, #5
 8000c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c64:	484e      	ldr	r0, [pc, #312]	@ (8000da0 <_svfiprintf_r+0x1e4>)
 8000c66:	f7ff fab3 	bl	80001d0 <memchr>
 8000c6a:	9a04      	ldr	r2, [sp, #16]
 8000c6c:	b9d8      	cbnz	r0, 8000ca6 <_svfiprintf_r+0xea>
 8000c6e:	06d0      	lsls	r0, r2, #27
 8000c70:	bf44      	itt	mi
 8000c72:	2320      	movmi	r3, #32
 8000c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c78:	0711      	lsls	r1, r2, #28
 8000c7a:	bf44      	itt	mi
 8000c7c:	232b      	movmi	r3, #43	@ 0x2b
 8000c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c82:	f89a 3000 	ldrb.w	r3, [sl]
 8000c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c88:	d015      	beq.n	8000cb6 <_svfiprintf_r+0xfa>
 8000c8a:	9a07      	ldr	r2, [sp, #28]
 8000c8c:	4654      	mov	r4, sl
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f04f 0c0a 	mov.w	ip, #10
 8000c94:	4621      	mov	r1, r4
 8000c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c9a:	3b30      	subs	r3, #48	@ 0x30
 8000c9c:	2b09      	cmp	r3, #9
 8000c9e:	d94b      	bls.n	8000d38 <_svfiprintf_r+0x17c>
 8000ca0:	b1b0      	cbz	r0, 8000cd0 <_svfiprintf_r+0x114>
 8000ca2:	9207      	str	r2, [sp, #28]
 8000ca4:	e014      	b.n	8000cd0 <_svfiprintf_r+0x114>
 8000ca6:	eba0 0308 	sub.w	r3, r0, r8
 8000caa:	fa09 f303 	lsl.w	r3, r9, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	9304      	str	r3, [sp, #16]
 8000cb2:	46a2      	mov	sl, r4
 8000cb4:	e7d2      	b.n	8000c5c <_svfiprintf_r+0xa0>
 8000cb6:	9b03      	ldr	r3, [sp, #12]
 8000cb8:	1d19      	adds	r1, r3, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	9103      	str	r1, [sp, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bfbb      	ittet	lt
 8000cc2:	425b      	neglt	r3, r3
 8000cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8000cc8:	9307      	strge	r3, [sp, #28]
 8000cca:	9307      	strlt	r3, [sp, #28]
 8000ccc:	bfb8      	it	lt
 8000cce:	9204      	strlt	r2, [sp, #16]
 8000cd0:	7823      	ldrb	r3, [r4, #0]
 8000cd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cd4:	d10a      	bne.n	8000cec <_svfiprintf_r+0x130>
 8000cd6:	7863      	ldrb	r3, [r4, #1]
 8000cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cda:	d132      	bne.n	8000d42 <_svfiprintf_r+0x186>
 8000cdc:	9b03      	ldr	r3, [sp, #12]
 8000cde:	1d1a      	adds	r2, r3, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	9203      	str	r2, [sp, #12]
 8000ce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000ce8:	3402      	adds	r4, #2
 8000cea:	9305      	str	r3, [sp, #20]
 8000cec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000da4 <_svfiprintf_r+0x1e8>
 8000cf0:	7821      	ldrb	r1, [r4, #0]
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	4650      	mov	r0, sl
 8000cf6:	f7ff fa6b 	bl	80001d0 <memchr>
 8000cfa:	b138      	cbz	r0, 8000d0c <_svfiprintf_r+0x150>
 8000cfc:	9b04      	ldr	r3, [sp, #16]
 8000cfe:	eba0 000a 	sub.w	r0, r0, sl
 8000d02:	2240      	movs	r2, #64	@ 0x40
 8000d04:	4082      	lsls	r2, r0
 8000d06:	4313      	orrs	r3, r2
 8000d08:	3401      	adds	r4, #1
 8000d0a:	9304      	str	r3, [sp, #16]
 8000d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d10:	4825      	ldr	r0, [pc, #148]	@ (8000da8 <_svfiprintf_r+0x1ec>)
 8000d12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d16:	2206      	movs	r2, #6
 8000d18:	f7ff fa5a 	bl	80001d0 <memchr>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d036      	beq.n	8000d8e <_svfiprintf_r+0x1d2>
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <_svfiprintf_r+0x1f0>)
 8000d22:	bb1b      	cbnz	r3, 8000d6c <_svfiprintf_r+0x1b0>
 8000d24:	9b03      	ldr	r3, [sp, #12]
 8000d26:	3307      	adds	r3, #7
 8000d28:	f023 0307 	bic.w	r3, r3, #7
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	9303      	str	r3, [sp, #12]
 8000d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d32:	4433      	add	r3, r6
 8000d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d36:	e76a      	b.n	8000c0e <_svfiprintf_r+0x52>
 8000d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d3c:	460c      	mov	r4, r1
 8000d3e:	2001      	movs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <_svfiprintf_r+0xd8>
 8000d42:	2300      	movs	r3, #0
 8000d44:	3401      	adds	r4, #1
 8000d46:	9305      	str	r3, [sp, #20]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 0c0a 	mov.w	ip, #10
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d54:	3a30      	subs	r2, #48	@ 0x30
 8000d56:	2a09      	cmp	r2, #9
 8000d58:	d903      	bls.n	8000d62 <_svfiprintf_r+0x1a6>
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0c6      	beq.n	8000cec <_svfiprintf_r+0x130>
 8000d5e:	9105      	str	r1, [sp, #20]
 8000d60:	e7c4      	b.n	8000cec <_svfiprintf_r+0x130>
 8000d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d66:	4604      	mov	r4, r0
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e7f0      	b.n	8000d4e <_svfiprintf_r+0x192>
 8000d6c:	ab03      	add	r3, sp, #12
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	462a      	mov	r2, r5
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <_svfiprintf_r+0x1f4>)
 8000d74:	a904      	add	r1, sp, #16
 8000d76:	4638      	mov	r0, r7
 8000d78:	f3af 8000 	nop.w
 8000d7c:	1c42      	adds	r2, r0, #1
 8000d7e:	4606      	mov	r6, r0
 8000d80:	d1d6      	bne.n	8000d30 <_svfiprintf_r+0x174>
 8000d82:	89ab      	ldrh	r3, [r5, #12]
 8000d84:	065b      	lsls	r3, r3, #25
 8000d86:	f53f af2d 	bmi.w	8000be4 <_svfiprintf_r+0x28>
 8000d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d8c:	e72c      	b.n	8000be8 <_svfiprintf_r+0x2c>
 8000d8e:	ab03      	add	r3, sp, #12
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	462a      	mov	r2, r5
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <_svfiprintf_r+0x1f4>)
 8000d96:	a904      	add	r1, sp, #16
 8000d98:	4638      	mov	r0, r7
 8000d9a:	f000 f879 	bl	8000e90 <_printf_i>
 8000d9e:	e7ed      	b.n	8000d7c <_svfiprintf_r+0x1c0>
 8000da0:	080011c4 	.word	0x080011c4
 8000da4:	080011ca 	.word	0x080011ca
 8000da8:	080011ce 	.word	0x080011ce
 8000dac:	00000000 	.word	0x00000000
 8000db0:	08000b05 	.word	0x08000b05

08000db4 <_printf_common>:
 8000db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db8:	4616      	mov	r6, r2
 8000dba:	4698      	mov	r8, r3
 8000dbc:	688a      	ldr	r2, [r1, #8]
 8000dbe:	690b      	ldr	r3, [r1, #16]
 8000dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	bfb8      	it	lt
 8000dc8:	4613      	movlt	r3, r2
 8000dca:	6033      	str	r3, [r6, #0]
 8000dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	b10a      	cbz	r2, 8000dda <_printf_common+0x26>
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	6033      	str	r3, [r6, #0]
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	0699      	lsls	r1, r3, #26
 8000dde:	bf42      	ittt	mi
 8000de0:	6833      	ldrmi	r3, [r6, #0]
 8000de2:	3302      	addmi	r3, #2
 8000de4:	6033      	strmi	r3, [r6, #0]
 8000de6:	6825      	ldr	r5, [r4, #0]
 8000de8:	f015 0506 	ands.w	r5, r5, #6
 8000dec:	d106      	bne.n	8000dfc <_printf_common+0x48>
 8000dee:	f104 0a19 	add.w	sl, r4, #25
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	6832      	ldr	r2, [r6, #0]
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	dc26      	bgt.n	8000e4a <_printf_common+0x96>
 8000dfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e00:	6822      	ldr	r2, [r4, #0]
 8000e02:	3b00      	subs	r3, #0
 8000e04:	bf18      	it	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	0692      	lsls	r2, r2, #26
 8000e0a:	d42b      	bmi.n	8000e64 <_printf_common+0xb0>
 8000e0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e10:	4641      	mov	r1, r8
 8000e12:	4638      	mov	r0, r7
 8000e14:	47c8      	blx	r9
 8000e16:	3001      	adds	r0, #1
 8000e18:	d01e      	beq.n	8000e58 <_printf_common+0xa4>
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	6922      	ldr	r2, [r4, #16]
 8000e1e:	f003 0306 	and.w	r3, r3, #6
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf02      	ittt	eq
 8000e26:	68e5      	ldreq	r5, [r4, #12]
 8000e28:	6833      	ldreq	r3, [r6, #0]
 8000e2a:	1aed      	subeq	r5, r5, r3
 8000e2c:	68a3      	ldr	r3, [r4, #8]
 8000e2e:	bf0c      	ite	eq
 8000e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e34:	2500      	movne	r5, #0
 8000e36:	4293      	cmp	r3, r2
 8000e38:	bfc4      	itt	gt
 8000e3a:	1a9b      	subgt	r3, r3, r2
 8000e3c:	18ed      	addgt	r5, r5, r3
 8000e3e:	2600      	movs	r6, #0
 8000e40:	341a      	adds	r4, #26
 8000e42:	42b5      	cmp	r5, r6
 8000e44:	d11a      	bne.n	8000e7c <_printf_common+0xc8>
 8000e46:	2000      	movs	r0, #0
 8000e48:	e008      	b.n	8000e5c <_printf_common+0xa8>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	4652      	mov	r2, sl
 8000e4e:	4641      	mov	r1, r8
 8000e50:	4638      	mov	r0, r7
 8000e52:	47c8      	blx	r9
 8000e54:	3001      	adds	r0, #1
 8000e56:	d103      	bne.n	8000e60 <_printf_common+0xac>
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7c6      	b.n	8000df2 <_printf_common+0x3e>
 8000e64:	18e1      	adds	r1, r4, r3
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	2030      	movs	r0, #48	@ 0x30
 8000e6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e6e:	4422      	add	r2, r4
 8000e70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e78:	3302      	adds	r3, #2
 8000e7a:	e7c7      	b.n	8000e0c <_printf_common+0x58>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4622      	mov	r2, r4
 8000e80:	4641      	mov	r1, r8
 8000e82:	4638      	mov	r0, r7
 8000e84:	47c8      	blx	r9
 8000e86:	3001      	adds	r0, #1
 8000e88:	d0e6      	beq.n	8000e58 <_printf_common+0xa4>
 8000e8a:	3601      	adds	r6, #1
 8000e8c:	e7d9      	b.n	8000e42 <_printf_common+0x8e>
	...

08000e90 <_printf_i>:
 8000e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e94:	7e0f      	ldrb	r7, [r1, #24]
 8000e96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e98:	2f78      	cmp	r7, #120	@ 0x78
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	4680      	mov	r8, r0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000ea6:	d807      	bhi.n	8000eb8 <_printf_i+0x28>
 8000ea8:	2f62      	cmp	r7, #98	@ 0x62
 8000eaa:	d80a      	bhi.n	8000ec2 <_printf_i+0x32>
 8000eac:	2f00      	cmp	r7, #0
 8000eae:	f000 80d1 	beq.w	8001054 <_printf_i+0x1c4>
 8000eb2:	2f58      	cmp	r7, #88	@ 0x58
 8000eb4:	f000 80b8 	beq.w	8001028 <_printf_i+0x198>
 8000eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ec0:	e03a      	b.n	8000f38 <_printf_i+0xa8>
 8000ec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ec6:	2b15      	cmp	r3, #21
 8000ec8:	d8f6      	bhi.n	8000eb8 <_printf_i+0x28>
 8000eca:	a101      	add	r1, pc, #4	@ (adr r1, 8000ed0 <_printf_i+0x40>)
 8000ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ed0:	08000f29 	.word	0x08000f29
 8000ed4:	08000f3d 	.word	0x08000f3d
 8000ed8:	08000eb9 	.word	0x08000eb9
 8000edc:	08000eb9 	.word	0x08000eb9
 8000ee0:	08000eb9 	.word	0x08000eb9
 8000ee4:	08000eb9 	.word	0x08000eb9
 8000ee8:	08000f3d 	.word	0x08000f3d
 8000eec:	08000eb9 	.word	0x08000eb9
 8000ef0:	08000eb9 	.word	0x08000eb9
 8000ef4:	08000eb9 	.word	0x08000eb9
 8000ef8:	08000eb9 	.word	0x08000eb9
 8000efc:	0800103b 	.word	0x0800103b
 8000f00:	08000f67 	.word	0x08000f67
 8000f04:	08000ff5 	.word	0x08000ff5
 8000f08:	08000eb9 	.word	0x08000eb9
 8000f0c:	08000eb9 	.word	0x08000eb9
 8000f10:	0800105d 	.word	0x0800105d
 8000f14:	08000eb9 	.word	0x08000eb9
 8000f18:	08000f67 	.word	0x08000f67
 8000f1c:	08000eb9 	.word	0x08000eb9
 8000f20:	08000eb9 	.word	0x08000eb9
 8000f24:	08000ffd 	.word	0x08000ffd
 8000f28:	6833      	ldr	r3, [r6, #0]
 8000f2a:	1d1a      	adds	r2, r3, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6032      	str	r2, [r6, #0]
 8000f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e09c      	b.n	8001076 <_printf_i+0x1e6>
 8000f3c:	6833      	ldr	r3, [r6, #0]
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	1d19      	adds	r1, r3, #4
 8000f42:	6031      	str	r1, [r6, #0]
 8000f44:	0606      	lsls	r6, r0, #24
 8000f46:	d501      	bpl.n	8000f4c <_printf_i+0xbc>
 8000f48:	681d      	ldr	r5, [r3, #0]
 8000f4a:	e003      	b.n	8000f54 <_printf_i+0xc4>
 8000f4c:	0645      	lsls	r5, r0, #25
 8000f4e:	d5fb      	bpl.n	8000f48 <_printf_i+0xb8>
 8000f50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	da03      	bge.n	8000f60 <_printf_i+0xd0>
 8000f58:	232d      	movs	r3, #45	@ 0x2d
 8000f5a:	426d      	negs	r5, r5
 8000f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f60:	4858      	ldr	r0, [pc, #352]	@ (80010c4 <_printf_i+0x234>)
 8000f62:	230a      	movs	r3, #10
 8000f64:	e011      	b.n	8000f8a <_printf_i+0xfa>
 8000f66:	6821      	ldr	r1, [r4, #0]
 8000f68:	6833      	ldr	r3, [r6, #0]
 8000f6a:	0608      	lsls	r0, r1, #24
 8000f6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f70:	d402      	bmi.n	8000f78 <_printf_i+0xe8>
 8000f72:	0649      	lsls	r1, r1, #25
 8000f74:	bf48      	it	mi
 8000f76:	b2ad      	uxthmi	r5, r5
 8000f78:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f7a:	4852      	ldr	r0, [pc, #328]	@ (80010c4 <_printf_i+0x234>)
 8000f7c:	6033      	str	r3, [r6, #0]
 8000f7e:	bf14      	ite	ne
 8000f80:	230a      	movne	r3, #10
 8000f82:	2308      	moveq	r3, #8
 8000f84:	2100      	movs	r1, #0
 8000f86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f8a:	6866      	ldr	r6, [r4, #4]
 8000f8c:	60a6      	str	r6, [r4, #8]
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	db05      	blt.n	8000f9e <_printf_i+0x10e>
 8000f92:	6821      	ldr	r1, [r4, #0]
 8000f94:	432e      	orrs	r6, r5
 8000f96:	f021 0104 	bic.w	r1, r1, #4
 8000f9a:	6021      	str	r1, [r4, #0]
 8000f9c:	d04b      	beq.n	8001036 <_printf_i+0x1a6>
 8000f9e:	4616      	mov	r6, r2
 8000fa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8000fa4:	fb03 5711 	mls	r7, r3, r1, r5
 8000fa8:	5dc7      	ldrb	r7, [r0, r7]
 8000faa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fae:	462f      	mov	r7, r5
 8000fb0:	42bb      	cmp	r3, r7
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	d9f4      	bls.n	8000fa0 <_printf_i+0x110>
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d10b      	bne.n	8000fd2 <_printf_i+0x142>
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	07df      	lsls	r7, r3, #31
 8000fbe:	d508      	bpl.n	8000fd2 <_printf_i+0x142>
 8000fc0:	6923      	ldr	r3, [r4, #16]
 8000fc2:	6861      	ldr	r1, [r4, #4]
 8000fc4:	4299      	cmp	r1, r3
 8000fc6:	bfde      	ittt	le
 8000fc8:	2330      	movle	r3, #48	@ 0x30
 8000fca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000fd2:	1b92      	subs	r2, r2, r6
 8000fd4:	6122      	str	r2, [r4, #16]
 8000fd6:	f8cd a000 	str.w	sl, [sp]
 8000fda:	464b      	mov	r3, r9
 8000fdc:	aa03      	add	r2, sp, #12
 8000fde:	4621      	mov	r1, r4
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	f7ff fee7 	bl	8000db4 <_printf_common>
 8000fe6:	3001      	adds	r0, #1
 8000fe8:	d14a      	bne.n	8001080 <_printf_i+0x1f0>
 8000fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fee:	b004      	add	sp, #16
 8000ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	6023      	str	r3, [r4, #0]
 8000ffc:	4832      	ldr	r0, [pc, #200]	@ (80010c8 <_printf_i+0x238>)
 8000ffe:	2778      	movs	r7, #120	@ 0x78
 8001000:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	6831      	ldr	r1, [r6, #0]
 8001008:	061f      	lsls	r7, r3, #24
 800100a:	f851 5b04 	ldr.w	r5, [r1], #4
 800100e:	d402      	bmi.n	8001016 <_printf_i+0x186>
 8001010:	065f      	lsls	r7, r3, #25
 8001012:	bf48      	it	mi
 8001014:	b2ad      	uxthmi	r5, r5
 8001016:	6031      	str	r1, [r6, #0]
 8001018:	07d9      	lsls	r1, r3, #31
 800101a:	bf44      	itt	mi
 800101c:	f043 0320 	orrmi.w	r3, r3, #32
 8001020:	6023      	strmi	r3, [r4, #0]
 8001022:	b11d      	cbz	r5, 800102c <_printf_i+0x19c>
 8001024:	2310      	movs	r3, #16
 8001026:	e7ad      	b.n	8000f84 <_printf_i+0xf4>
 8001028:	4826      	ldr	r0, [pc, #152]	@ (80010c4 <_printf_i+0x234>)
 800102a:	e7e9      	b.n	8001000 <_printf_i+0x170>
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	f023 0320 	bic.w	r3, r3, #32
 8001032:	6023      	str	r3, [r4, #0]
 8001034:	e7f6      	b.n	8001024 <_printf_i+0x194>
 8001036:	4616      	mov	r6, r2
 8001038:	e7bd      	b.n	8000fb6 <_printf_i+0x126>
 800103a:	6833      	ldr	r3, [r6, #0]
 800103c:	6825      	ldr	r5, [r4, #0]
 800103e:	6961      	ldr	r1, [r4, #20]
 8001040:	1d18      	adds	r0, r3, #4
 8001042:	6030      	str	r0, [r6, #0]
 8001044:	062e      	lsls	r6, r5, #24
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	d501      	bpl.n	800104e <_printf_i+0x1be>
 800104a:	6019      	str	r1, [r3, #0]
 800104c:	e002      	b.n	8001054 <_printf_i+0x1c4>
 800104e:	0668      	lsls	r0, r5, #25
 8001050:	d5fb      	bpl.n	800104a <_printf_i+0x1ba>
 8001052:	8019      	strh	r1, [r3, #0]
 8001054:	2300      	movs	r3, #0
 8001056:	6123      	str	r3, [r4, #16]
 8001058:	4616      	mov	r6, r2
 800105a:	e7bc      	b.n	8000fd6 <_printf_i+0x146>
 800105c:	6833      	ldr	r3, [r6, #0]
 800105e:	1d1a      	adds	r2, r3, #4
 8001060:	6032      	str	r2, [r6, #0]
 8001062:	681e      	ldr	r6, [r3, #0]
 8001064:	6862      	ldr	r2, [r4, #4]
 8001066:	2100      	movs	r1, #0
 8001068:	4630      	mov	r0, r6
 800106a:	f7ff f8b1 	bl	80001d0 <memchr>
 800106e:	b108      	cbz	r0, 8001074 <_printf_i+0x1e4>
 8001070:	1b80      	subs	r0, r0, r6
 8001072:	6060      	str	r0, [r4, #4]
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	6123      	str	r3, [r4, #16]
 8001078:	2300      	movs	r3, #0
 800107a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800107e:	e7aa      	b.n	8000fd6 <_printf_i+0x146>
 8001080:	6923      	ldr	r3, [r4, #16]
 8001082:	4632      	mov	r2, r6
 8001084:	4649      	mov	r1, r9
 8001086:	4640      	mov	r0, r8
 8001088:	47d0      	blx	sl
 800108a:	3001      	adds	r0, #1
 800108c:	d0ad      	beq.n	8000fea <_printf_i+0x15a>
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	079b      	lsls	r3, r3, #30
 8001092:	d413      	bmi.n	80010bc <_printf_i+0x22c>
 8001094:	68e0      	ldr	r0, [r4, #12]
 8001096:	9b03      	ldr	r3, [sp, #12]
 8001098:	4298      	cmp	r0, r3
 800109a:	bfb8      	it	lt
 800109c:	4618      	movlt	r0, r3
 800109e:	e7a6      	b.n	8000fee <_printf_i+0x15e>
 80010a0:	2301      	movs	r3, #1
 80010a2:	4632      	mov	r2, r6
 80010a4:	4649      	mov	r1, r9
 80010a6:	4640      	mov	r0, r8
 80010a8:	47d0      	blx	sl
 80010aa:	3001      	adds	r0, #1
 80010ac:	d09d      	beq.n	8000fea <_printf_i+0x15a>
 80010ae:	3501      	adds	r5, #1
 80010b0:	68e3      	ldr	r3, [r4, #12]
 80010b2:	9903      	ldr	r1, [sp, #12]
 80010b4:	1a5b      	subs	r3, r3, r1
 80010b6:	42ab      	cmp	r3, r5
 80010b8:	dcf2      	bgt.n	80010a0 <_printf_i+0x210>
 80010ba:	e7eb      	b.n	8001094 <_printf_i+0x204>
 80010bc:	2500      	movs	r5, #0
 80010be:	f104 0619 	add.w	r6, r4, #25
 80010c2:	e7f5      	b.n	80010b0 <_printf_i+0x220>
 80010c4:	080011d5 	.word	0x080011d5
 80010c8:	080011e6 	.word	0x080011e6

080010cc <memmove>:
 80010cc:	4288      	cmp	r0, r1
 80010ce:	b510      	push	{r4, lr}
 80010d0:	eb01 0402 	add.w	r4, r1, r2
 80010d4:	d902      	bls.n	80010dc <memmove+0x10>
 80010d6:	4284      	cmp	r4, r0
 80010d8:	4623      	mov	r3, r4
 80010da:	d807      	bhi.n	80010ec <memmove+0x20>
 80010dc:	1e43      	subs	r3, r0, #1
 80010de:	42a1      	cmp	r1, r4
 80010e0:	d008      	beq.n	80010f4 <memmove+0x28>
 80010e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80010e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80010ea:	e7f8      	b.n	80010de <memmove+0x12>
 80010ec:	4402      	add	r2, r0
 80010ee:	4601      	mov	r1, r0
 80010f0:	428a      	cmp	r2, r1
 80010f2:	d100      	bne.n	80010f6 <memmove+0x2a>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80010fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80010fe:	e7f7      	b.n	80010f0 <memmove+0x24>

08001100 <_sbrk_r>:
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	4d06      	ldr	r5, [pc, #24]	@ (800111c <_sbrk_r+0x1c>)
 8001104:	2300      	movs	r3, #0
 8001106:	4604      	mov	r4, r0
 8001108:	4608      	mov	r0, r1
 800110a:	602b      	str	r3, [r5, #0]
 800110c:	f7ff faae 	bl	800066c <_sbrk>
 8001110:	1c43      	adds	r3, r0, #1
 8001112:	d102      	bne.n	800111a <_sbrk_r+0x1a>
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	b103      	cbz	r3, 800111a <_sbrk_r+0x1a>
 8001118:	6023      	str	r3, [r4, #0]
 800111a:	bd38      	pop	{r3, r4, r5, pc}
 800111c:	200001b0 	.word	0x200001b0

08001120 <memcpy>:
 8001120:	440a      	add	r2, r1
 8001122:	4291      	cmp	r1, r2
 8001124:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001128:	d100      	bne.n	800112c <memcpy+0xc>
 800112a:	4770      	bx	lr
 800112c:	b510      	push	{r4, lr}
 800112e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001132:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001136:	4291      	cmp	r1, r2
 8001138:	d1f9      	bne.n	800112e <memcpy+0xe>
 800113a:	bd10      	pop	{r4, pc}

0800113c <_realloc_r>:
 800113c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001140:	4607      	mov	r7, r0
 8001142:	4614      	mov	r4, r2
 8001144:	460d      	mov	r5, r1
 8001146:	b921      	cbnz	r1, 8001152 <_realloc_r+0x16>
 8001148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800114c:	4611      	mov	r1, r2
 800114e:	f7ff bc4d 	b.w	80009ec <_malloc_r>
 8001152:	b92a      	cbnz	r2, 8001160 <_realloc_r+0x24>
 8001154:	f7ff fbde 	bl	8000914 <_free_r>
 8001158:	4625      	mov	r5, r4
 800115a:	4628      	mov	r0, r5
 800115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001160:	f000 f81a 	bl	8001198 <_malloc_usable_size_r>
 8001164:	4284      	cmp	r4, r0
 8001166:	4606      	mov	r6, r0
 8001168:	d802      	bhi.n	8001170 <_realloc_r+0x34>
 800116a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800116e:	d8f4      	bhi.n	800115a <_realloc_r+0x1e>
 8001170:	4621      	mov	r1, r4
 8001172:	4638      	mov	r0, r7
 8001174:	f7ff fc3a 	bl	80009ec <_malloc_r>
 8001178:	4680      	mov	r8, r0
 800117a:	b908      	cbnz	r0, 8001180 <_realloc_r+0x44>
 800117c:	4645      	mov	r5, r8
 800117e:	e7ec      	b.n	800115a <_realloc_r+0x1e>
 8001180:	42b4      	cmp	r4, r6
 8001182:	4622      	mov	r2, r4
 8001184:	4629      	mov	r1, r5
 8001186:	bf28      	it	cs
 8001188:	4632      	movcs	r2, r6
 800118a:	f7ff ffc9 	bl	8001120 <memcpy>
 800118e:	4629      	mov	r1, r5
 8001190:	4638      	mov	r0, r7
 8001192:	f7ff fbbf 	bl	8000914 <_free_r>
 8001196:	e7f1      	b.n	800117c <_realloc_r+0x40>

08001198 <_malloc_usable_size_r>:
 8001198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800119c:	1f18      	subs	r0, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bfbc      	itt	lt
 80011a2:	580b      	ldrlt	r3, [r1, r0]
 80011a4:	18c0      	addlt	r0, r0, r3
 80011a6:	4770      	bx	lr

080011a8 <_init>:
 80011a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011aa:	bf00      	nop
 80011ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ae:	bc08      	pop	{r3}
 80011b0:	469e      	mov	lr, r3
 80011b2:	4770      	bx	lr

080011b4 <_fini>:
 80011b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b6:	bf00      	nop
 80011b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ba:	bc08      	pop	{r3}
 80011bc:	469e      	mov	lr, r3
 80011be:	4770      	bx	lr
