
Uart_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000074c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080008d4  080008d4  000018d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008ec  080008ec  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080008ec  080008ec  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080008ec  080008ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008ec  080008ec  000018ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008f0  080008f0  000018f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080008f4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013e2  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006db  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00003af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f4  00000000  00000000  00003c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019196  00000000  00000000  00003d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001aa0  00000000  00000000  0001cee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ba99  00000000  00000000  0001e982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa41b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003f8  00000000  00000000  000aa460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000aa858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  000aa87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008bc 	.word	0x080008bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080008bc 	.word	0x080008bc

080001c8 <I2CInit>:
 *      Author: admin
 */

#include "i2c.h"

void I2CInit(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	// gpio config
	// enable gpio b clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80001cc:	4b29      	ldr	r3, [pc, #164]	@ (8000274 <I2CInit+0xac>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a28      	ldr	r2, [pc, #160]	@ (8000274 <I2CInit+0xac>)
 80001d2:	f043 0302 	orr.w	r3, r3, #2
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	// set mode as alt fn (10)
	GPIOB->MODER |= BV(2*6+1) | BV(2*7+1);
 80001d8:	4b27      	ldr	r3, [pc, #156]	@ (8000278 <I2CInit+0xb0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a26      	ldr	r2, [pc, #152]	@ (8000278 <I2CInit+0xb0>)
 80001de:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(2*6) | BV(2*7));
 80001e4:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <I2CInit+0xb0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a23      	ldr	r2, [pc, #140]	@ (8000278 <I2CInit+0xb0>)
 80001ea:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 80001ee:	6013      	str	r3, [r2, #0]
	// set alt fn to AF4 (i2c)
	GPIOB->AFR[0] = (4 << (4*6)) | (4 << (4*7));
 80001f0:	4b21      	ldr	r3, [pc, #132]	@ (8000278 <I2CInit+0xb0>)
 80001f2:	f04f 4288 	mov.w	r2, #1140850688	@ 0x44000000
 80001f6:	621a      	str	r2, [r3, #32]
	// no pull up & pull down regr
	GPIOB->PUPDR &= ~(BV(2*6+1) | BV(2*7+1) | BV(2*6) | BV(2*7));
 80001f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000278 <I2CInit+0xb0>)
 80001fa:	68db      	ldr	r3, [r3, #12]
 80001fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000278 <I2CInit+0xb0>)
 80001fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000202:	60d3      	str	r3, [r2, #12]
	// Enable open-drain for PB6 & PB7
	GPIOB->OTYPER |= BV(6) | BV(7);
 8000204:	4b1c      	ldr	r3, [pc, #112]	@ (8000278 <I2CInit+0xb0>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a1b      	ldr	r2, [pc, #108]	@ (8000278 <I2CInit+0xb0>)
 800020a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800020e:	6053      	str	r3, [r2, #4]

	// i2c config
	// enable i2c peri clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000210:	4b18      	ldr	r3, [pc, #96]	@ (8000274 <I2CInit+0xac>)
 8000212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000214:	4a17      	ldr	r2, [pc, #92]	@ (8000274 <I2CInit+0xac>)
 8000216:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800021a:	6413      	str	r3, [r2, #64]	@ 0x40
	// i2c sw reset
	I2C1->CR1 |= I2C_CR1_SWRST;
 800021c:	4b17      	ldr	r3, [pc, #92]	@ (800027c <I2CInit+0xb4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a16      	ldr	r2, [pc, #88]	@ (800027c <I2CInit+0xb4>)
 8000222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000226:	6013      	str	r3, [r2, #0]
	I2C1->CR1 = 0;				// clear all CR1 bits
 8000228:	4b14      	ldr	r3, [pc, #80]	@ (800027c <I2CInit+0xb4>)
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
	// peri clock -- CR2 = 16MHz
	I2C1->CR2 |= 16 << I2C_CR2_FREQ_Pos;
 800022e:	4b13      	ldr	r3, [pc, #76]	@ (800027c <I2CInit+0xb4>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a12      	ldr	r2, [pc, #72]	@ (800027c <I2CInit+0xb4>)
 8000234:	f043 0310 	orr.w	r3, r3, #16
 8000238:	6053      	str	r3, [r2, #4]
	// set i2c clock -- CCR = 80 (Std mode=100KHz)
	I2C1->CCR = 80;
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <I2CInit+0xb4>)
 800023c:	2250      	movs	r2, #80	@ 0x50
 800023e:	61da      	str	r2, [r3, #28]
	I2C1->CCR &= ~I2C_CCR_FS;	// standard mode (default)
 8000240:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <I2CInit+0xb4>)
 8000242:	69db      	ldr	r3, [r3, #28]
 8000244:	4a0d      	ldr	r2, [pc, #52]	@ (800027c <I2CInit+0xb4>)
 8000246:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800024a:	61d3      	str	r3, [r2, #28]
	// set Trise -- TRISE = 17
	I2C1->TRISE = 17;
 800024c:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <I2CInit+0xb4>)
 800024e:	2211      	movs	r2, #17
 8000250:	621a      	str	r2, [r3, #32]
	// enable ack
	I2C1->CR1 |= I2C_CR1_ACK;
 8000252:	4b0a      	ldr	r3, [pc, #40]	@ (800027c <I2CInit+0xb4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a09      	ldr	r2, [pc, #36]	@ (800027c <I2CInit+0xb4>)
 8000258:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800025c:	6013      	str	r3, [r2, #0]
	// enable i2c peri
	I2C1->CR1 |= I2C_CR1_PE;
 800025e:	4b07      	ldr	r3, [pc, #28]	@ (800027c <I2CInit+0xb4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a06      	ldr	r2, [pc, #24]	@ (800027c <I2CInit+0xb4>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6013      	str	r3, [r2, #0]
}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020400 	.word	0x40020400
 800027c:	40005400 	.word	0x40005400

08000280 <I2CStart>:

void I2CStart(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	// send start bit
	I2C1->CR1 |= I2C_CR1_START;
 8000284:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <I2CStart+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	@ (80002a8 <I2CStart+0x28>)
 800028a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800028e:	6013      	str	r3, [r2, #0]
	// wait for start bit sent on bus
	while(!(I2C1->SR1 & I2C_SR1_SB));	// while((I2C1->SR1 & I2C_SR1_SB) == 0);
 8000290:	bf00      	nop
 8000292:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <I2CStart+0x28>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <I2CStart+0x12>
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	40005400 	.word	0x40005400

080002ac <I2CStop>:

void I2CRepeatStart(void) {
	I2CStart();
}

void I2CStop(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	// send stop bit
	I2C1->CR1 |= I2C_CR1_STOP;
 80002b0:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <I2CStop+0x28>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a07      	ldr	r2, [pc, #28]	@ (80002d4 <I2CStop+0x28>)
 80002b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ba:	6013      	str	r3, [r2, #0]
	// wait for stop bit sent on bus
	while(I2C1->SR2 & I2C_SR2_BUSY);		// while((I2C1->SR2 & I2C_SR2_BUSY) != 0);
 80002bc:	bf00      	nop
 80002be:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <I2CStop+0x28>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1f9      	bne.n	80002be <I2CStop+0x12>
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40005400 	.word	0x40005400

080002d8 <I2CSendSlaveAddr>:

void I2CSendSlaveAddr(uint8_t addr) {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	// write slave addr in DR
	I2C1->DR = addr;
 80002e2:	4a09      	ldr	r2, [pc, #36]	@ (8000308 <I2CSendSlaveAddr+0x30>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	6113      	str	r3, [r2, #16]
	// wait until slave addr is sent
	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 80002e8:	bf00      	nop
 80002ea:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <I2CSendSlaveAddr+0x30>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f003 0302 	and.w	r3, r3, #2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <I2CSendSlaveAddr+0x12>
	// read status regrs to clear acks
	(void)I2C1->SR1;
 80002f6:	4b04      	ldr	r3, [pc, #16]	@ (8000308 <I2CSendSlaveAddr+0x30>)
 80002f8:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 80002fa:	4b03      	ldr	r3, [pc, #12]	@ (8000308 <I2CSendSlaveAddr+0x30>)
 80002fc:	699b      	ldr	r3, [r3, #24]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40005400 	.word	0x40005400

0800030c <I2CSendData>:

void I2CSendData(uint8_t data) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
	// wait until data is sent
	while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000316:	bf00      	nop
 8000318:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <I2CSendData+0x38>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <I2CSendData+0xc>
	// write data in DR
	I2C1->DR = data;
 8000324:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <I2CSendData+0x38>)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	6113      	str	r3, [r2, #16]
	// poll for BTF is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800032a:	bf00      	nop
 800032c:	4b05      	ldr	r3, [pc, #20]	@ (8000344 <I2CSendData+0x38>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f003 0304 	and.w	r3, r3, #4
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f9      	beq.n	800032c <I2CSendData+0x20>
}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40005400 	.word	0x40005400

08000348 <I2CWrite>:
	while(!(I2C1->SR1 & I2C_SR1_RXNE));
	// collect received data and return it
	return I2C1->DR;
}

void I2CWrite(uint8_t addr, uint8_t data) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	460a      	mov	r2, r1
 8000352:	71fb      	strb	r3, [r7, #7]
 8000354:	4613      	mov	r3, r2
 8000356:	71bb      	strb	r3, [r7, #6]
	I2CStart();
 8000358:	f7ff ff92 	bl	8000280 <I2CStart>
	I2CSendSlaveAddr(addr);
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ffba 	bl	80002d8 <I2CSendSlaveAddr>
	I2CSendData(data);
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffd0 	bl	800030c <I2CSendData>
	I2CStop();
 800036c:	f7ff ff9e 	bl	80002ac <I2CStop>
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <DelayMs+0x44>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000386:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <DelayMs+0x48>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0e      	ldr	r2, [pc, #56]	@ (80003c4 <DelayMs+0x4c>)
 800038c:	fba2 2303 	umull	r2, r3, r2, r3
 8000390:	099b      	lsrs	r3, r3, #6
 8000392:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800039e:	bf00      	nop
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <DelayMs+0x44>)
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	1ad2      	subs	r2, r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d3f8      	bcc.n	80003a0 <DelayMs+0x28>
}
 80003ae:	bf00      	nop
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e0001000 	.word	0xe0001000
 80003c0:	20000000 	.word	0x20000000
 80003c4:	10624dd3 	.word	0x10624dd3

080003c8 <LcdInit>:
 *      Author: admin
 */

#include "lcd.h"

void LcdInit(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	// i2c initialization
	I2CInit();
 80003cc:	f7ff fefc 	bl	80001c8 <I2CInit>
	// lcd initialization
	DelayMs(20);
 80003d0:	2014      	movs	r0, #20
 80003d2:	f7ff ffd1 	bl	8000378 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 80003d6:	2103      	movs	r1, #3
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f82e 	bl	800043a <LcdWriteNibble>
	DelayMs(5);
 80003de:	2005      	movs	r0, #5
 80003e0:	f7ff ffca 	bl	8000378 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 80003e4:	2103      	movs	r1, #3
 80003e6:	2000      	movs	r0, #0
 80003e8:	f000 f827 	bl	800043a <LcdWriteNibble>
	DelayMs(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f7ff ffc3 	bl	8000378 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x03);
 80003f2:	2103      	movs	r1, #3
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f820 	bl	800043a <LcdWriteNibble>
	DelayMs(1);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f7ff ffbc 	bl	8000378 <DelayMs>
	LcdWriteNibble(LCD_CMD, 0x02);
 8000400:	2102      	movs	r1, #2
 8000402:	2000      	movs	r0, #0
 8000404:	f000 f819 	bl	800043a <LcdWriteNibble>
	DelayMs(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f7ff ffb5 	bl	8000378 <DelayMs>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 800040e:	2128      	movs	r1, #40	@ 0x28
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f84a 	bl	80004aa <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 8000416:	2108      	movs	r1, #8
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f846 	bl	80004aa <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 800041e:	2101      	movs	r1, #1
 8000420:	2000      	movs	r0, #0
 8000422:	f000 f842 	bl	80004aa <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 8000426:	2106      	movs	r1, #6
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f83e 	bl	80004aa <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 800042e:	210c      	movs	r1, #12
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f83a 	bl	80004aa <LcdWriteByte>
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}

0800043a <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 800043a:	b580      	push	{r7, lr}
 800043c:	b084      	sub	sp, #16
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	460a      	mov	r2, r1
 8000444:	71fb      	strb	r3, [r7, #7]
 8000446:	4613      	mov	r3, r2
 8000448:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b01      	cmp	r3, #1
 800044e:	bf0c      	ite	eq
 8000450:	2301      	moveq	r3, #1
 8000452:	2300      	movne	r3, #0
 8000454:	b2db      	uxtb	r3, r3
 8000456:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 8000458:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800045c:	011b      	lsls	r3, r3, #4
 800045e:	b25a      	sxtb	r2, r3
 8000460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000464:	4313      	orrs	r3, r2
 8000466:	b25b      	sxtb	r3, r3
 8000468:	f043 030c 	orr.w	r3, r3, #12
 800046c:	b25b      	sxtb	r3, r3
 800046e:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 8000470:	7bbb      	ldrb	r3, [r7, #14]
 8000472:	4619      	mov	r1, r3
 8000474:	204e      	movs	r0, #78	@ 0x4e
 8000476:	f7ff ff67 	bl	8000348 <I2CWrite>
	DelayMs(1);
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff ff7c 	bl	8000378 <DelayMs>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 8000480:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000484:	011b      	lsls	r3, r3, #4
 8000486:	b25a      	sxtb	r2, r3
 8000488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800048c:	4313      	orrs	r3, r2
 800048e:	b25b      	sxtb	r3, r3
 8000490:	f043 0308 	orr.w	r3, r3, #8
 8000494:	b25b      	sxtb	r3, r3
 8000496:	73bb      	strb	r3, [r7, #14]
	I2CWrite(LCD_SLAVE_ADDR_W, val);
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	4619      	mov	r1, r3
 800049c:	204e      	movs	r0, #78	@ 0x4e
 800049e:	f7ff ff53 	bl	8000348 <I2CWrite>
}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <LcdWriteByte>:

void LcdWriteByte(uint8_t rs, uint8_t data) {
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b084      	sub	sp, #16
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	4603      	mov	r3, r0
 80004b2:	460a      	mov	r2, r1
 80004b4:	71fb      	strb	r3, [r7, #7]
 80004b6:	4613      	mov	r3, r2
 80004b8:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	091b      	lsrs	r3, r3, #4
 80004be:	73fb      	strb	r3, [r7, #15]
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	f003 030f 	and.w	r3, r3, #15
 80004c6:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 80004c8:	7bfa      	ldrb	r2, [r7, #15]
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	4611      	mov	r1, r2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffb3 	bl	800043a <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 80004d4:	7bba      	ldrb	r2, [r7, #14]
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	4611      	mov	r1, r2
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ffad 	bl	800043a <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	DelayMs(1);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f7ff ff49 	bl	8000378 <DelayMs>
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <LcdPuts>:
void LcdPuts(uint8_t line, char *str) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b084      	sub	sp, #16
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	4603      	mov	r3, r0
 80004f6:	6039      	str	r1, [r7, #0]
 80004f8:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4619      	mov	r1, r3
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff ffd3 	bl	80004aa <LcdWriteByte>
	// write chars one by one
	for(int i=0;str[i] != '\0'; i++)
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	e00a      	b.n	8000520 <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	4413      	add	r3, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff ffc8 	bl	80004aa <LcdWriteByte>
	for(int i=0;str[i] != '\0'; i++)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3301      	adds	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1ee      	bne.n	800050a <LcdPuts+0x1c>
}
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <DelayMs+0x44>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <DelayMs+0x48>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0e      	ldr	r2, [pc, #56]	@ (8000584 <DelayMs+0x4c>)
 800054c:	fba2 2303 	umull	r2, r3, r2, r3
 8000550:	099b      	lsrs	r3, r3, #6
 8000552:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	fb02 f303 	mul.w	r3, r2, r3
 800055c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800055e:	bf00      	nop
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <DelayMs+0x44>)
 8000562:	685a      	ldr	r2, [r3, #4]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3f8      	bcc.n	8000560 <DelayMs+0x28>
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e0001000 	.word	0xe0001000
 8000580:	20000000 	.word	0x20000000
 8000584:	10624dd3 	.word	0x10624dd3

08000588 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	char str[16];
	UartInit(9600);
 800058e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000592:	f000 f875 	bl	8000680 <UartInit>
	LcdInit();
 8000596:	f7ff ff17 	bl	80003c8 <LcdInit>
	UartPuts("Enter Strings\r\n");
 800059a:	481b      	ldr	r0, [pc, #108]	@ (8000608 <main+0x80>)
 800059c:	f000 f8ec 	bl	8000778 <UartPuts>
	while(1){
		UartGets(str);
 80005a0:	463b      	mov	r3, r7
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f904 	bl	80007b0 <UartGets>


		if(!strncmp(str,"L1",2))
 80005a8:	463b      	mov	r3, r7
 80005aa:	2202      	movs	r2, #2
 80005ac:	4917      	ldr	r1, [pc, #92]	@ (800060c <main+0x84>)
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f94d 	bl	800084e <strncmp>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d109      	bne.n	80005ce <main+0x46>
		{
			DelayMs(100);
 80005ba:	2064      	movs	r0, #100	@ 0x64
 80005bc:	f7ff ffbc 	bl	8000538 <DelayMs>
			LcdPuts(LCD_LINE1,&str[2]);
 80005c0:	463b      	mov	r3, r7
 80005c2:	3302      	adds	r3, #2
 80005c4:	4619      	mov	r1, r3
 80005c6:	2080      	movs	r0, #128	@ 0x80
 80005c8:	f7ff ff91 	bl	80004ee <LcdPuts>
 80005cc:	e7e8      	b.n	80005a0 <main+0x18>
		}

		else
		{
			DelayMs(500);
 80005ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d2:	f7ff ffb1 	bl	8000538 <DelayMs>
			if(!strncmp(str,"L2",2))
 80005d6:	463b      	mov	r3, r7
 80005d8:	2202      	movs	r2, #2
 80005da:	490d      	ldr	r1, [pc, #52]	@ (8000610 <main+0x88>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f936 	bl	800084e <strncmp>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d105      	bne.n	80005f4 <main+0x6c>
				LcdPuts(LCD_LINE2,&str[2]);
 80005e8:	463b      	mov	r3, r7
 80005ea:	3302      	adds	r3, #2
 80005ec:	4619      	mov	r1, r3
 80005ee:	20c0      	movs	r0, #192	@ 0xc0
 80005f0:	f7ff ff7d 	bl	80004ee <LcdPuts>
			DelayMs(500);
 80005f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f8:	f7ff ff9e 	bl	8000538 <DelayMs>
			LcdPuts(LCD_LINE2,str);
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	20c0      	movs	r0, #192	@ 0xc0
 8000602:	f7ff ff74 	bl	80004ee <LcdPuts>
		UartGets(str);
 8000606:	e7cb      	b.n	80005a0 <main+0x18>
 8000608:	080008d4 	.word	0x080008d4
 800060c:	080008e4 	.word	0x080008e4
 8000610:	080008e8 	.word	0x080008e8

08000614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000618:	f000 f802 	bl	8000620 <DWT_Init>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000624:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <DWT_Init+0x58>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <DWT_Init+0x58>)
 800062a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800062e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <DWT_Init+0x58>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	4a10      	ldr	r2, [pc, #64]	@ (8000678 <DWT_Init+0x58>)
 8000636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800063a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <DWT_Init+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a0e      	ldr	r2, [pc, #56]	@ (800067c <DWT_Init+0x5c>)
 8000642:	f023 0301 	bic.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <DWT_Init+0x5c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <DWT_Init+0x5c>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <DWT_Init+0x5c>)
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800065a:	bf00      	nop
    __ASM volatile ("NOP");
 800065c:	bf00      	nop
    __ASM volatile ("NOP");
 800065e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <DWT_Init+0x5c>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf0c      	ite	eq
 8000668:	2301      	moveq	r3, #1
 800066a:	2300      	movne	r3, #0
 800066c:	b2db      	uxtb	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000edf0 	.word	0xe000edf0
 800067c:	e0001000 	.word	0xe0001000

08000680 <UartInit>:
 *      Author: admin
 */

#include "uart.h"

void UartInit(uint32_t baud) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	/* GPIO config */
	// enable gpio clock
	//RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000688:	4b24      	ldr	r3, [pc, #144]	@ (800071c <UartInit+0x9c>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	4a23      	ldr	r2, [pc, #140]	@ (800071c <UartInit+0x9c>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio - no pull up & no pull down
	GPIOA->PUPDR &= ~(BV(2*2+1) | BV(2*2) | BV(2*3+1) | BV(2*3));
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <UartInit+0xa0>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <UartInit+0xa0>)
 800069a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800069e:	60d3      	str	r3, [r2, #12]
	// set gpio (PA2, PA3) mode as alt fn = 10
	GPIOA->MODER |= BV(2*2+1) | BV(2*3+1);
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <UartInit+0xa0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000720 <UartInit+0xa0>)
 80006a6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80006aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(2*2) | BV(2*3));
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <UartInit+0xa0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000720 <UartInit+0xa0>)
 80006b2:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80006b6:	6013      	str	r3, [r2, #0]
	// set gpio (PA2, PA3) pin alt fn as uart (AF7) -- AFRL = AFR[0], AFRH = AFR[1]
	GPIOA->AFR[0] = (7 << (2*4)) | (7 << (3*4));
 80006b8:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <UartInit+0xa0>)
 80006ba:	f44f 42ee 	mov.w	r2, #30464	@ 0x7700
 80006be:	621a      	str	r2, [r3, #32]
	/* UART config */
	// enable UART2 clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <UartInit+0x9c>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a15      	ldr	r2, [pc, #84]	@ (800071c <UartInit+0x9c>)
 80006c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
	// UART2 config (8N1) = 8-bit data transfer=0, disable parity=0, tx en=1, rx en=1
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <UartInit+0xa4>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	60da      	str	r2, [r3, #12]
	// baud rate setting
	if(baud == 9600)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80006d8:	d104      	bne.n	80006e4 <UartInit+0x64>
		USART2->BRR = 0x0683;
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <UartInit+0xa4>)
 80006dc:	f240 6283 	movw	r2, #1667	@ 0x683
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	e00f      	b.n	8000704 <UartInit+0x84>
	else if(baud == 38400)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80006ea:	d104      	bne.n	80006f6 <UartInit+0x76>
		USART2->BRR = 0x01A1;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <UartInit+0xa4>)
 80006ee:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	e006      	b.n	8000704 <UartInit+0x84>
	else if(baud == 115200)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80006fc:	d102      	bne.n	8000704 <UartInit+0x84>
		USART2->BRR = 0x008B;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <UartInit+0xa4>)
 8000700:	228b      	movs	r2, #139	@ 0x8b
 8000702:	609a      	str	r2, [r3, #8]
	// enable uart=1
	USART2->CR1 |= USART_CR1_UE;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <UartInit+0xa4>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <UartInit+0xa4>)
 800070a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000
 8000724:	40004400 	.word	0x40004400

08000728 <UartPutch>:

void UartPutch(int ch) {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	// write char in TDR
	USART2->DR = ch;
 8000730:	4a07      	ldr	r2, [pc, #28]	@ (8000750 <UartPutch+0x28>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6053      	str	r3, [r2, #4]
	// wait until Tx is done (until Tx regr is not empty)
	while((USART2->SR & USART_SR_TXE) == 0)
 8000736:	bf00      	nop
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <UartPutch+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f9      	beq.n	8000738 <UartPutch+0x10>
		;
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40004400 	.word	0x40004400

08000754 <UartGetch>:

int UartGetch(void) {
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	// wait until data is Rx is done (until Rx regr is empty)
	while((USART2->SR & USART_SR_RXNE) == 0)
 8000758:	bf00      	nop
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <UartGetch+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f9      	beq.n	800075a <UartGetch+0x6>
		;
	// read char from RDR
	return USART2->DR;
 8000766:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <UartGetch+0x20>)
 8000768:	685b      	ldr	r3, [r3, #4]
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40004400 	.word	0x40004400

08000778 <UartPuts>:

void UartPuts(char *str) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	e009      	b.n	800079a <UartPuts+0x22>
		UartPutch(str[i]);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffca 	bl	8000728 <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3301      	adds	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1ef      	bne.n	8000786 <UartPuts+0xe>
}
 80007a6:	bf00      	nop
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <UartGets>:

void UartGets(char *str) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	int i=0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80007bc:	f7ff ffca 	bl	8000754 <UartGetch>
 80007c0:	4603      	mov	r3, r0
 80007c2:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	7afa      	ldrb	r2, [r7, #11]
 80007cc:	701a      	strb	r2, [r3, #0]
		i++;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	2b0d      	cmp	r3, #13
 80007d8:	d1f0      	bne.n	80007bc <UartGets+0xc>
	str[i] = '\n';
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	220a      	movs	r2, #10
 80007e2:	701a      	strb	r2, [r3, #0]
	i++;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000800:	f7ff ff08 	bl	8000614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <LoopForever+0x6>)
  ldr r1, =_edata
 8000806:	490d      	ldr	r1, [pc, #52]	@ (800083c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000808:	4a0d      	ldr	r2, [pc, #52]	@ (8000840 <LoopForever+0xe>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <LoopForever+0x12>)
  ldr r4, =_ebss
 800081c:	4c0a      	ldr	r4, [pc, #40]	@ (8000848 <LoopForever+0x16>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800082a:	f000 f823 	bl	8000874 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800082e:	f7ff feab 	bl	8000588 <main>

08000832 <LoopForever>:

LoopForever:
  b LoopForever
 8000832:	e7fe      	b.n	8000832 <LoopForever>
  ldr   r0, =_estack
 8000834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000840:	080008f4 	.word	0x080008f4
  ldr r2, =_sbss
 8000844:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000848:	20000020 	.word	0x20000020

0800084c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC_IRQHandler>

0800084e <strncmp>:
 800084e:	b510      	push	{r4, lr}
 8000850:	b16a      	cbz	r2, 800086e <strncmp+0x20>
 8000852:	3901      	subs	r1, #1
 8000854:	1884      	adds	r4, r0, r2
 8000856:	f810 2b01 	ldrb.w	r2, [r0], #1
 800085a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800085e:	429a      	cmp	r2, r3
 8000860:	d103      	bne.n	800086a <strncmp+0x1c>
 8000862:	42a0      	cmp	r0, r4
 8000864:	d001      	beq.n	800086a <strncmp+0x1c>
 8000866:	2a00      	cmp	r2, #0
 8000868:	d1f5      	bne.n	8000856 <strncmp+0x8>
 800086a:	1ad0      	subs	r0, r2, r3
 800086c:	bd10      	pop	{r4, pc}
 800086e:	4610      	mov	r0, r2
 8000870:	e7fc      	b.n	800086c <strncmp+0x1e>
	...

08000874 <__libc_init_array>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	4d0d      	ldr	r5, [pc, #52]	@ (80008ac <__libc_init_array+0x38>)
 8000878:	4c0d      	ldr	r4, [pc, #52]	@ (80008b0 <__libc_init_array+0x3c>)
 800087a:	1b64      	subs	r4, r4, r5
 800087c:	10a4      	asrs	r4, r4, #2
 800087e:	2600      	movs	r6, #0
 8000880:	42a6      	cmp	r6, r4
 8000882:	d109      	bne.n	8000898 <__libc_init_array+0x24>
 8000884:	4d0b      	ldr	r5, [pc, #44]	@ (80008b4 <__libc_init_array+0x40>)
 8000886:	4c0c      	ldr	r4, [pc, #48]	@ (80008b8 <__libc_init_array+0x44>)
 8000888:	f000 f818 	bl	80008bc <_init>
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	10a4      	asrs	r4, r4, #2
 8000890:	2600      	movs	r6, #0
 8000892:	42a6      	cmp	r6, r4
 8000894:	d105      	bne.n	80008a2 <__libc_init_array+0x2e>
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f855 3b04 	ldr.w	r3, [r5], #4
 800089c:	4798      	blx	r3
 800089e:	3601      	adds	r6, #1
 80008a0:	e7ee      	b.n	8000880 <__libc_init_array+0xc>
 80008a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a6:	4798      	blx	r3
 80008a8:	3601      	adds	r6, #1
 80008aa:	e7f2      	b.n	8000892 <__libc_init_array+0x1e>
 80008ac:	080008ec 	.word	0x080008ec
 80008b0:	080008ec 	.word	0x080008ec
 80008b4:	080008ec 	.word	0x080008ec
 80008b8:	080008f0 	.word	0x080008f0

080008bc <_init>:
 80008bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008be:	bf00      	nop
 80008c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c2:	bc08      	pop	{r3}
 80008c4:	469e      	mov	lr, r3
 80008c6:	4770      	bx	lr

080008c8 <_fini>:
 80008c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ca:	bf00      	nop
 80008cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ce:	bc08      	pop	{r3}
 80008d0:	469e      	mov	lr, r3
 80008d2:	4770      	bx	lr
