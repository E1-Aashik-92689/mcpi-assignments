
Day17_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000530  08000530  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000530  08000530  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000530  08000530  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000530  08000530  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000530  08000530  00001530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000534  08000534  00001534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000538  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001287  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000051f  00000000  00000000  000032b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  000037d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000af  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018080  00000000  00000000  0000398f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001411  00000000  00000000  0001ba0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be19  00000000  00000000  0001ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8c39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000298  00000000  00000000  000a8c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000a8f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000049  00000000  00000000  000a8f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000518 	.word	0x08000518

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000518 	.word	0x08000518

080001c8 <LedInit>:
 *      Author: admin
 */

#include "led.h"

void LedInit(uint32_t pin) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// enable gpio d clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001d0:	4b28      	ldr	r3, [pc, #160]	@ (8000274 <LedInit+0xac>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a27      	ldr	r2, [pc, #156]	@ (8000274 <LedInit+0xac>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// change pin mode to output (01)
	GPIOD->MODER |= BV(pin*2);
 80001dc:	4b26      	ldr	r3, [pc, #152]	@ (8000278 <LedInit+0xb0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0052      	lsls	r2, r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a22      	ldr	r2, [pc, #136]	@ (8000278 <LedInit+0xb0>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~BV(pin*2 + 1);
 80001f2:	4b21      	ldr	r3, [pc, #132]	@ (8000278 <LedInit+0xb0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	0052      	lsls	r2, r2, #1
 80001fa:	3201      	adds	r2, #1
 80001fc:	2101      	movs	r1, #1
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	43d2      	mvns	r2, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a1c      	ldr	r2, [pc, #112]	@ (8000278 <LedInit+0xb0>)
 8000208:	400b      	ands	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
	// disable pullup & pulldown
	GPIOD->PUPDR &= ~(BV(pin*2) | BV(pin*2 + 1));
 800020c:	4b1a      	ldr	r3, [pc, #104]	@ (8000278 <LedInit+0xb0>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	0052      	lsls	r2, r2, #1
 8000214:	2101      	movs	r1, #1
 8000216:	4091      	lsls	r1, r2
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	0052      	lsls	r2, r2, #1
 800021c:	3201      	adds	r2, #1
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	430a      	orrs	r2, r1
 8000226:	43d2      	mvns	r2, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a13      	ldr	r2, [pc, #76]	@ (8000278 <LedInit+0xb0>)
 800022c:	400b      	ands	r3, r1
 800022e:	60d3      	str	r3, [r2, #12]
	// keep gpio speed low
	GPIOD->OSPEEDR &= ~(BV(pin*2) | BV(pin*2 + 1));
 8000230:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <LedInit+0xb0>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	2101      	movs	r1, #1
 800023a:	4091      	lsls	r1, r2
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	0052      	lsls	r2, r2, #1
 8000240:	3201      	adds	r2, #1
 8000242:	2001      	movs	r0, #1
 8000244:	fa00 f202 	lsl.w	r2, r0, r2
 8000248:	430a      	orrs	r2, r1
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <LedInit+0xb0>)
 8000250:	400b      	ands	r3, r1
 8000252:	6093      	str	r3, [r2, #8]
	// enable push-pull mode
	GPIOD->OTYPER &= ~BV(pin);
 8000254:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <LedInit+0xb0>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2101      	movs	r1, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	@ (8000278 <LedInit+0xb0>)
 8000266:	400b      	ands	r3, r1
 8000268:	6053      	str	r3, [r2, #4]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020c00 	.word	0x40020c00

0800027c <LedToggle>:
	LedOn(pin);
	DelayMs(ms);
	LedOff(pin);
}

void LedToggle(uint32_t pin) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	GPIOD->ODR ^= BV(pin);
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <LedToggle+0x28>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	2101      	movs	r1, #1
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a04      	ldr	r2, [pc, #16]	@ (80002a4 <LedToggle+0x28>)
 8000294:	404b      	eors	r3, r1
 8000296:	6153      	str	r3, [r2, #20]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <main>:
#endif


volatile extern uint32_t xTicks;
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	LedInit(LED_GREEN);
 80002ac:	200c      	movs	r0, #12
 80002ae:	f7ff ff8b 	bl	80001c8 <LedInit>
	LedInit(LED_ORANGE);
 80002b2:	200d      	movs	r0, #13
 80002b4:	f7ff ff88 	bl	80001c8 <LedInit>
	LedInit(LED_RED);
 80002b8:	200e      	movs	r0, #14
 80002ba:	f7ff ff85 	bl	80001c8 <LedInit>
	LedInit(LED_BLUE);
 80002be:	200f      	movs	r0, #15
 80002c0:	f7ff ff82 	bl	80001c8 <LedInit>
	systick_init();
 80002c4:	f000 f86a 	bl	800039c <systick_init>
	while(1)
	{
		LedToggle(LED_GREEN);
 80002c8:	200c      	movs	r0, #12
 80002ca:	f7ff ffd7 	bl	800027c <LedToggle>
		SysTick_DelayMs(1000);
 80002ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002d2:	f000 f875 	bl	80003c0 <SysTick_DelayMs>
		LedToggle(LED_ORANGE);
 80002d6:	200d      	movs	r0, #13
 80002d8:	f7ff ffd0 	bl	800027c <LedToggle>
		SysTick_DelayMs(1000);
 80002dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e0:	f000 f86e 	bl	80003c0 <SysTick_DelayMs>
		LedToggle(LED_RED);
 80002e4:	200e      	movs	r0, #14
 80002e6:	f7ff ffc9 	bl	800027c <LedToggle>
		SysTick_DelayMs(1000);
 80002ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ee:	f000 f867 	bl	80003c0 <SysTick_DelayMs>
		LedToggle(LED_BLUE);
 80002f2:	200f      	movs	r0, #15
 80002f4:	f7ff ffc2 	bl	800027c <LedToggle>
		SysTick_DelayMs(1000);
 80002f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002fc:	f000 f860 	bl	80003c0 <SysTick_DelayMs>
		LedToggle(LED_GREEN);
 8000300:	bf00      	nop
 8000302:	e7e1      	b.n	80002c8 <main+0x20>

08000304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	6039      	str	r1, [r7, #0]
 800030e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000314:	2b00      	cmp	r3, #0
 8000316:	db0a      	blt.n	800032e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2da      	uxtb	r2, r3
 800031c:	490c      	ldr	r1, [pc, #48]	@ (8000350 <__NVIC_SetPriority+0x4c>)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	0112      	lsls	r2, r2, #4
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	440b      	add	r3, r1
 8000328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800032c:	e00a      	b.n	8000344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4908      	ldr	r1, [pc, #32]	@ (8000354 <__NVIC_SetPriority+0x50>)
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	3b04      	subs	r3, #4
 800033c:	0112      	lsls	r2, r2, #4
 800033e:	b2d2      	uxtb	r2, r2
 8000340:	440b      	add	r3, r1
 8000342:	761a      	strb	r2, [r3, #24]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	e000e100 	.word	0xe000e100
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3b01      	subs	r3, #1
 8000364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000368:	d301      	bcc.n	800036e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036a:	2301      	movs	r3, #1
 800036c:	e00f      	b.n	800038e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800036e:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <SysTick_Config+0x40>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3b01      	subs	r3, #1
 8000374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000376:	210f      	movs	r1, #15
 8000378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800037c:	f7ff ffc2 	bl	8000304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <SysTick_Config+0x40>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000386:	4b04      	ldr	r3, [pc, #16]	@ (8000398 <SysTick_Config+0x40>)
 8000388:	2207      	movs	r2, #7
 800038a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	e000e010 	.word	0xe000e010

0800039c <systick_init>:
#include "systick.h"
uint32_t xTicks = 0;
void systick_init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock/1000);
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <systick_init+0x1c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <systick_init+0x20>)
 80003a6:	fba2 2303 	umull	r2, r3, r2, r3
 80003aa:	099b      	lsrs	r3, r3, #6
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ffd3 	bl	8000358 <SysTick_Config>
}//SystemCoreClock = 16000000
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	10624dd3 	.word	0x10624dd3

080003c0 <SysTick_DelayMs>:

void SysTick_DelayMs(uint32_t ms)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	uint32_t cur = xTicks;
 80003c8:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <SysTick_DelayMs+0x30>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	60fb      	str	r3, [r7, #12]
	uint32_t wait = cur+ms;
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4413      	add	r3, r2
 80003d4:	60bb      	str	r3, [r7, #8]
	while(xTicks < wait);
 80003d6:	bf00      	nop
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <SysTick_DelayMs+0x30>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d8fa      	bhi.n	80003d8 <SysTick_DelayMs+0x18>

}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000020 	.word	0x20000020

080003f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	xTicks++;
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <SysTick_Handler+0x18>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	4a03      	ldr	r2, [pc, #12]	@ (800040c <SysTick_Handler+0x18>)
 8000400:	6013      	str	r3, [r2, #0]
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000020 	.word	0x20000020

08000410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000414:	f000 f802 	bl	800041c <DWT_Init>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000420:	4b14      	ldr	r3, [pc, #80]	@ (8000474 <DWT_Init+0x58>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	4a13      	ldr	r2, [pc, #76]	@ (8000474 <DWT_Init+0x58>)
 8000426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800042a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800042c:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <DWT_Init+0x58>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4a10      	ldr	r2, [pc, #64]	@ (8000474 <DWT_Init+0x58>)
 8000432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000436:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <DWT_Init+0x5c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0e      	ldr	r2, [pc, #56]	@ (8000478 <DWT_Init+0x5c>)
 800043e:	f023 0301 	bic.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000444:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <DWT_Init+0x5c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0b      	ldr	r2, [pc, #44]	@ (8000478 <DWT_Init+0x5c>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <DWT_Init+0x5c>)
 8000452:	2200      	movs	r2, #0
 8000454:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000456:	bf00      	nop
    __ASM volatile ("NOP");
 8000458:	bf00      	nop
    __ASM volatile ("NOP");
 800045a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <DWT_Init+0x5c>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	2b00      	cmp	r3, #0
 8000462:	bf0c      	ite	eq
 8000464:	2301      	moveq	r3, #1
 8000466:	2300      	movne	r3, #0
 8000468:	b2db      	uxtb	r3, r3
}
 800046a:	4618      	mov	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000edf0 	.word	0xe000edf0
 8000478:	e0001000 	.word	0xe0001000

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	@ (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000480:	f7ff ffc6 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	@ (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	@ (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	@ (80004c0 <LoopForever+0xe>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	@ (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	@ (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80004aa:	f000 f811 	bl	80004d0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80004ae:	f7ff fefb 	bl	80002a8 <main>

080004b2 <LoopForever>:

LoopForever:
  b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004c0:	08000538 	.word	0x08000538
  ldr r2, =_sbss
 80004c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004c8:	20000024 	.word	0x20000024

080004cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <__libc_init_array>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000508 <__libc_init_array+0x38>)
 80004d4:	4c0d      	ldr	r4, [pc, #52]	@ (800050c <__libc_init_array+0x3c>)
 80004d6:	1b64      	subs	r4, r4, r5
 80004d8:	10a4      	asrs	r4, r4, #2
 80004da:	2600      	movs	r6, #0
 80004dc:	42a6      	cmp	r6, r4
 80004de:	d109      	bne.n	80004f4 <__libc_init_array+0x24>
 80004e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000510 <__libc_init_array+0x40>)
 80004e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000514 <__libc_init_array+0x44>)
 80004e4:	f000 f818 	bl	8000518 <_init>
 80004e8:	1b64      	subs	r4, r4, r5
 80004ea:	10a4      	asrs	r4, r4, #2
 80004ec:	2600      	movs	r6, #0
 80004ee:	42a6      	cmp	r6, r4
 80004f0:	d105      	bne.n	80004fe <__libc_init_array+0x2e>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f8:	4798      	blx	r3
 80004fa:	3601      	adds	r6, #1
 80004fc:	e7ee      	b.n	80004dc <__libc_init_array+0xc>
 80004fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000502:	4798      	blx	r3
 8000504:	3601      	adds	r6, #1
 8000506:	e7f2      	b.n	80004ee <__libc_init_array+0x1e>
 8000508:	08000530 	.word	0x08000530
 800050c:	08000530 	.word	0x08000530
 8000510:	08000530 	.word	0x08000530
 8000514:	08000534 	.word	0x08000534

08000518 <_init>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr

08000524 <_fini>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr
